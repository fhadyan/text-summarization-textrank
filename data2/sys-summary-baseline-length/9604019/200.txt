 In natural language processing filtering is used to weed out those search paths that are redundant, i.e are not going to be used in the proof tree corresponding to the natural language expression to be generated or parsed.  Filter optimization often comprises an extension of a specific processing strategy such that it exploits specific knowledge about grammars and/or the computational task(s) that one is using them for.  At the same time it often remains unclear how these optimizations relate to each other and what they actually mean.  In this paper I show how starting from a definite clause characterization of filtering derived automatically from a logic grammar using Magic compilation, filter optimizations can be performed in a processor independent and logically clean fashion.  Magic (templates) is a general compilation technique for efficient bottom-up evaluation of logic programs developed in the deductive database community .  Given a logic program, Magic produces a new program in which the filtering as normally resulting from top-down evaluation is explicitly characterized through, so-called, magic predicates, which produce variable bindings for filtering when evaluated bottom-up.  (1992   (1996  