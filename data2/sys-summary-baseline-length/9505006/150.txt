 In their most common implementations, logic grammars resort to list representations of the strings being analyzed or synthesized.  This list-based implementation results in several deficiencies in logic grammars, while other deficiencies are inherited from Prolog.  Datalog grammars were born in order to address all these deficiencies, namely: an infinite Herbrand Universe, non-termination, unnecessary recomputation, structure creation on the heap, bottleneck for multi-threaded execution due to the use of (sequential) list data structures, and inability to work directly on files.  In Datalog grammars, a given CF grammar is automatically translated into an assertional representation, first proposed by Robert Kowalski, which is largely equivalent to the list-based one but which ensures, under appropriate evaluation mechanisms such as OLDT resolution, that the termination and complexity properties of the original CF-grammar are preserved. 