 There are two key ingredients for building an NLP system: a linguistic description a processing model (parser, generator etc In the past decade, there have been diverging trends in the area of linguistic descriptions and in the area of processing models.  Most large-scale linguistic descriptions make use of sorted feature formalisms, but implementations of these formalisms are in general too slow for building practically usable NLP systems.  Most of the progress in constructing efficient parsers and generators has been based on logic grammars that make use of ordinary Prolog terms.  We provide a general tool that brings together these developments by compiling sorted feature terms into a Prolog term representation, so that techniques from logic programming and logic grammars can be used to provide efficient processing models for sorted feature grammars.  In this introductory section, we discuss the advantages of sorted feature formalisms, and of the logic grammar paradigm, and show how the two developments can be combined.  The following sections describe the ProFIT language which provides sorted feature terms for Prolog, and its implementation.  They provide a compact notation. 