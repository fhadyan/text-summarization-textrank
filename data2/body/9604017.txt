  Suppose that we have a general grammar for English, or some other natural language; by this, we mean a grammar which encodes most of the important constructions in the language, and which is intended to be applicable to a large range of different domains and applications.
 The basic question attacked in this paper is the following one: can such a grammar be concretely useful if we want to process input from a specific domain? In particular, how can a parser that uses a general grammar achieve a level of efficiency that is practically acceptable?   The central problem is simple to state.
 By the very nature of its construction, a general grammar allows a great many theoretically valid analyses of almost any non-trivial sentence.
 However, in the context of a specific domain, most of these will be extremely implausible, and can in practice be ignored.
 If we want efficient parsing, we want to be able to focus our search on only a small portion of the space of theoretically valid grammatical analyses.
   One possible solution is of course to dispense with the idea of using a general grammar, and simply code a new grammar for each domain.
 Many people do this, but one cannot help feeling that something is being missed; intuitively, there are many domain-independent grammatical constraints, which one would prefer only to need to code once.
 In the last ten years, there have been a number of attempts to find ways to automatically adapt a general grammar and/or parser to the sub-language defined by a suitable training corpus.
 For example, train an LR parser based on a general grammar to be able to distinguish between likely and unlikely sequences of parsing actions; automatically infer sortal constraints, that can be used to rule out otherwise grammatical constituents; and describes methods that reduce the size of a general grammar to include only rules actually useful for parsing the training corpus.
   The work reported here is a logical continuation of two specific strands of research aimed in this general direction.
 The first is the popular idea of statistical tagging e.g.
 , , .
 Here, the basic idea is that a given small segment S of the input string may have several possible analyses; in particular, if S is a single word, it may potentially be any one of several parts of speech.
 However, if a substantial training corpus is available to provide reasonable estimates of the relevant parameters, the immediate context surrounding S will usually make most of the locally possible analyses of S extremely implausible.
 In the specific case of part-of-speech tagging, it is well-known that a large proportion of the incorrect tags can be eliminated ``safely'', i.e.
 with very low risk of eliminating correct tags.
 In the present paper, the statistical tagging idea is generalized to a method called ``constituent pruning''; this acts on local analyses of phrases normally larger than single-word units.
   Constituent pruning is a bottom-up approach, and is complemented by a second, top-down, method based on Explanation-Based Learning (EBL; , ).
 This part of the paper is essentially an extension and generalization of the line of work described in , , , , .
 Here, the basic idea is that grammar rules tend in any specific domain to combine much more frequently in some ways than in others.
 Given a sufficiently large corpus parsed by the original, general, grammar, it is possible to identify the common combinations of grammar rules and ``chunk'' them into ``macro-rules''.
 The result is a ``specialized'' grammar; this has a larger number of rules, but a simpler structure, allowing it in practice to be parsed very much more quickly using an LR-based method .
 The coverage of the specialized grammar is a strict subset of that of the original grammar; thus any analysis produced by the specialized grammar is guaranteed to be valid in the original one as well.
 The practical utility of the specialized grammar is largely determined by the loss of coverage incurred by the specialization process.
   The two methods, constituent pruning and grammar specialization, are combined as follows.
 The rules in the original, general, grammar are divided into two sets, called phrasal and non-phrasal respectively.
 Phrasal rules, the majority of which define non-recursive noun phrase constructions, are used as they are; non-phrasal rules are combined using EBL into chunks, forming a specialized grammar which is then compiled further into a set of LR-tables.
 Parsing proceeds by interleaving constituent creation and deletion.
 First, the lexicon and morphology rules are used to hypothesize word analyses.
 Constituent pruning then removes all sufficiently unlikely edges.
 Next, the phrasal rules are applied bottom-up, to find all possible phrasal edges, after which unlikely edges are again pruned.
 Finally, the specialized grammar is used to search for full parses.
 The scheme is fully implemented within a version of the Spoken Language Translator system , , and is normally applied to input in the form of small lattices of hypotheses produced by a speech recognizer.
   The rest of the paper is structured as follows.
 Section describes the constituent pruning method.
 Section describes the grammar specialization method, focusing on how the current work extends and improves on previous results.
 Section describes experiments where the constituent pruning/grammar specialization method was used on sets of previously unseen speech data.
 Section concludes and sketches further directions for research, which we are presently in the process of investigating.
   Before both the phrasal and full parsing stages, the constituent table (henceforth, the chart) is pruned to remove edges that are relatively unlikely to contribute to correct analyses.
   For example, after the string ``Show flight D L three one two'' is lexically analysed, edges for ``D'' and ``L'' as individual characters are pruned because another edge, derived from a lexical entry for ``D L'' as an airline code, is deemed far more plausible.
 Similarly, edges for ``one'' as a determiner and as a noun are pruned because, when flanked by two other numbers, ``one'' is far more likely to function as a number.
   Phrasal parsing then creates a number of new edges, including one for ``flight D L three one two'' as a noun phrase.
 This edge is deemed far more likely to serve as the basis for a correct full parse than any of the edges spanning substrings of this phrase; those edges, too, are therefore pruned.
 As a result, full parsing is very quick, and only one analysis (the correct one) is produced for the sentence.
 In the absence of pruning, processing takes over eight times as long and produces 37 analyses in total.
   Our algorithm estimates the probability of correctness of each edge: that is, the probability that the edge will contribute to the correct full analysis of the sentence (assuming there is one), given certain lexical and/or syntactic information about it.
 Values on each criterion (selection of pieces of information) are derived from training corpora by maximum likelihood estimation followed by smoothing.
 That is, our estimate for the probability that an edge with property P is correct is (modulo smoothing) simply the number of times edges with property P occur in correct analyses in training divided by the number of times such edges are created during the analysis process in training.
   The current criteria are:   The left bigram score: the probability of correctness of an edge considering only the following data about it: its tag (corresponding to its major category symbol plus, for a few categories, some additional distinctions derived from feature values); for a lexical edge, its word or semantic word class (words with similar distributions, such as city names, are grouped into classes to overcome data sparseness); or for a phrasal edge, the name of the final (topmost) grammar rule that was used to create it; the tag of a neighbouring edge immediately to its left.
 If there are several left neighbours, the one giving the highest probability is used.
 The right bigram score: as above, but considering right neighbours.
 The unigram score: the probability of correctness of an edge considering only the tree of grammar rules, with words or word classes at the leaves, that gave rise to it.
 For a lexical edge, this reduces to its word or word class, and its tag.
   Other criteria, such as trigrams and finer-grained tags, are obviously worth investigating, and could be applied straightforwardly within the framework described here.
   The minimum score derived from any of the criteria applied is deemed initially to be the score of the constituent.
 That is, an assumption of full statistical dependence , rather than the more common full independence, is made.
 When recognizer output is being processed, however, the estimate from each criterion is in fact multiplied by a further estimate derived from the acoustic score of the edge: that is, the score assigned by the speech recognizer to the best-scoring sentence hypothesis containing the word or word string for the edge in question.
 Multiplication is used here because acoustic and lexicosyntactic likelihoods for a word or constituent would appear to be more nearly fully independent than fully dependent, being based on very different kinds of information.
   Next, account is taken of the connectivity of the chart.
 Each vertex of the chart is labelled with the score of the best path through the chart that visits that vertex.
 In accordance with the dependence assumption, the score of a path is defined as the minimum of the scores of its component edges.
 Then the score of each edge is recalculated to be the minimum of its existing score and the scores of its start and end vertices, on the grounds that a constituent, however intrinsically plausible, is not worth preserving if it does not occur on any plausible paths.
   Finally, a pruning threshold is calculated as the score of the best path through the chart multiplied by a certain fraction.
 For the first pruning phase we use 1/20, and for the second, 1/150, although performance is not very sensitive to this.
 Any constituents scoring less than the threshold are pruned out.
   As the example above suggests, judicious pruning of the chart at appropriate points can greatly restrict the search space and speed up processing.
 Our method has points of similarity with some very recent work in Constraint Grammar and is an alternative to several other, related schemes.
   Firstly, a remarked earlier, it generalizes tagging: it not only adjudicates between possible labels for the same word, but can also use the existence of a constituent over one span of the chart as justification for pruning another constituent over another span, normally a subsumed one, as in the ``D L'' example.
 This is especially true in the second stage of pruning, when many constituents of different lengths have been created.
 Furthermore, it applies equally well to lattices, rather than strings, of words, and can take account of acoustic plausibility as well as syntactic considerations.
   Secondly, our method is related to beam search .
 In beam search, incomplete parses of an utterance are pruned or discarded when, on some criterion, they are significantly less plausible than other, competing parses.
 This pruning is fully interleaved with the parsing process.
 In contrast, our pruning takes place only at certain points: currently before parsing begins, and between the phrasal and full parsing stages.
 Potentially, as with any generate-and-test algorithm, this can mean efficiency is reduced: some paths will be explored that could in principle be pruned earlier.
 However, as the results in section below will show, this is not in practice a serious problem, because the second pruning phase greatly reduces the search space in preparation for the potentially inefficient full parsing phase.
 Our method has the advantage, compared to beam search, that there is no need for any particular search order to be followed; when pruning takes place, all constituents that could have been found at the stage in question are guaranteed already to exist.
   Thirdly, our method is a generalization of the strategy employed by .
 McCord interleaved parsing with pruning in the same way as us, but only compared constituents over the same span and with the same major category.
 Our comparisons are more global and therefore can result in more effective pruning.
   As described in Section above, the non-phrasal grammar rules are subjected to two phases of processing.
 In the first, ``EBL learning'' phase, a parsed training corpus is used to identify ``chunks'' of rules, which are combined by the EBL algorithm into single macro-rules.
 In the second phase, the resulting set of ``chunked'' rules is converted into LR table form, using the method of .
   There are two main parameters that can be adjusted in the EBL learning phase.
 Most simply, there is the size of the training corpus; a larger training corpus means a smaller loss of coverage due to grammar specialization.
 (Recall that grammar specialization in general trades coverage for speed).
 Secondly, there is the question of how to select the rule-chunks that will be turned into macro-rules.
 At one limit, the whole parse-tree for each training example is turned into a single rule, resulting in a specialized grammar all of whose derivations are completely ``flat''.
 These grammars can be parsed extremely quickly, but the coverage loss is in practice unacceptably high, even with very large training corpora.
 At the opposite extreme, each rule-chunk consists of a single rule-application; this yields a specialized grammar identical to the original one.
 The challenge is to find an intermediate solution, which specializes the grammar non-trivially without losing too much coverage.
   Several attempts to find good ``chunking criteria'' are described in the papers by Rayner and Samuelsson quoted above.
 In , a simple scheme is given, which creates rules corresponding to four possible units: full utterances, recursive NPs, PPs, and non-recursive NPs.
 A more elaborate scheme is given in , where the ``chunking criteria'' are learned automatically by an entropy-minimization method; the results, however, do not appear to improve on the earlier ones.
 In both cases, the coverage loss due to grammar specialization was about 10 to 12% using training corpora with about 5,000 examples.
 In practice, this is still unacceptably high for most applications.
   Our current scheme is an extension of the one from , where the rule-chunks are trees of non-phrasal rules whose roots and leaves are categories of the following possible types: full utterances, utterance units, imperative VPs, NPs, relative clauses, VP modifiers and PPs.
 The resulting specialized grammars are forced to be non-recursive, with derivations being a maximum of six levels deep.
 This is enforced by imposing the following dominance hierarchy between the possible categories:   utterance ] utterance_unit ] imperative_VP ] NP ] {rel, VP_modifier} ] PP   The precise definition of the rule-chunking criteria is quite simple, and is reproduced in the appendix.
   Note that only the non-phrasal rules are used as input to the chunks from which the specialized grammar rules are constructed.
 This has two important advantages.
 Firstly, since all the phrasal rules are excluded from the specialization process, the coverage loss associated with missing combinations of phrasal rules is eliminated.
 As the experiments in the next section show, the resulting improvement is quite substantial.
 Secondly, and possibly even more importantly, the number of specialized rules produced by a given training corpus is approximately halved.
 The most immediate consequence is that much larger training corpora can be used before the specialized grammars produced become too large to be handled by the LR table compiler.
 If both phrasal and non-phrasal rules are used, we have been unable to compile tables for rules derived from training sets of over 6,000 examples (the process was killed after running for about six hours on a Sun Sparc 20/HS21, SpecINT92=131.2).
 Using only non-phrasal rules, compilation of the tables for a 15,000 example training set required less than two CPU-hours on the same machine.
   This section describes a number of experiments carried out to test the utility of the theoretical ideas presented above.
 The basic corpus used was a set of 16,000 utterances from the Air Travel Planning (ATIS; ) domain.
 All of these utterances were available in text form; 15,000 of them were used for training, with 1,000 held out for test purposes.
 Care was taken to ensure not just that the utterances themselves, but also the speakers of the utterances were disjoint between test and training data; as pointed out in , failure to observe these precautions can result in substantial spurious improvements in test data results.
   The 16,000 sentence corpus was analysed by the SRI Core Language Engine , using a lexicon extended to cover the ATIS domain .
 All possible grammatical analyses of each utterance were recorded, and an interactive tool was used to allow a human judge to identify the correct and incorrect readings of each utterance.
 The judge was a first-year undergraduate student with a good knowledge of linguistics but no prior experience with the system; the process of judging the corpus took about two and a half person-months.
 The input to the EBL-based grammar-specialization process was limited to readings of corpus utterances that had been judged correct.
 When utterances had more than one correct reading, a preference heuristic was used to select the most plausible one.
   Two sets of experiments were performed.
 In the first, increasingly large portions of the training set were used to train specialized grammars.
 The coverage loss due to grammar specialization was then measured on the 1,000 utterance test set.
 The experiment was carried out using both the chunking criteria from (the ``Old'' scheme), and the chunking criteria described in Section above (the ``New'' scheme).
 The results are presented in Table 1.
   The second set of experiments tested more directly the effect of constituent pruning and grammar specialization on the Spoken Language Translator's speed and coverage; in particular, coverage was measured on the real task of translating English into Swedish, rather than the artificial one of producing a correct QLF analysis.
 To this end, the first 500 test-set utterances were presented in the form of speech hypothesis lattices derived by aligning and conflating the top five sentence strings produced by a version of the DECIPHER (TM) recognizer .
 The lattices were analysed by four different versions of the parser, exploring the different combinations of turning constituent pruning on or off, and specialized versus unspecialized grammars.
 The specialized grammar used the ``New'' scheme, and had been trained on the full training set.
 Utterances which took more than 90 CPU seconds to process were timed out and counted as failures.
   The four sets of outputs from the parser were then translated into Swedish by the SLT transfer and generation mechanism .
 Finally, the four sets of candidate translations were pairwise compared in the cases where differing translations had been produced.
 We have found this to be an effective way of evaluating system performance.
 Although people differ widely in their judgements of whether a given translation can be regarded as ``acceptable'', it is in most cases surprisingly easy to say which of two possible translations is preferable.
 The last two tables summarize the results.
 Table 2 gives the average processing times per input lattice for each type of processing (times measured running SICStus Prolog on a SUN Sparc 20/HS21), showing how the time is divided between the various processing phases.
 Table 3 shows the relative scores of the four parsing variants, measured according to the ``preferable translation'' criterion.
   Table 2 indicates that EBL and pruning each make processing about three times faster; the combination of both gives a factor of about nine.
 In fact, as the detailed breakdown shows, even this underestimates the effect on the main parsing phase: when both pruning and EBL are operating, processing times for other components (morphology, pruning and preferences) become the dominant ones.
 As we have so far expended little effort on optimizing these phases of processing, it is reasonable to expect substantial further gains to be possible.
   Even more interestingly, Table 3 shows that real system performance, in terms of producing a good translation, is significantly improved by pruning, and is not degraded by grammar specialization.
 (The slight improvement in coverage with EBL on is not statistically significant).
 Our interpretation of these results is that the technical loss of grammar coverage due to the specialization and pruning processes is more than counterbalanced by two positive effects.
 Firstly, fewer utterances time out due to slow processing; secondly, the reduced space of possible analyses means that the problem of selecting between different possible analyses of a given utterance becomes easier.
   To sum up, the methods presented here demonstrate that it is possible to use the combined pruning and grammar specialization method to speed up the whole analysis phase by nearly an order of magnitude, without incurring any real penalty in the form of reduced coverage.
 We find this an exciting and significant result, and are further continuing our research in this area during the coming year.
 In the last two paragraphs we sketch some ongoing work.
   All the results presented above pertain to English only.
 The first topic we have been investigating is the application of the methods described here to processing of other languages.
 Preliminary experiments we have carried out on the Swedish version of the CLE have been encouraging; using exactly the same pruning methods and EBL chunking criteria as for English, we obtain comparable speed-ups.
 The loss of coverage due to grammar specialization also appears comparable, though we have not yet had time to do the work needed to verify this properly.
 We intend to do so soon, and also to repeat the experiments on the French version of the CLE .
   The second topic is a more radical departure, and can be viewed as an attempt to make interleaving of parsing and pruning the basic principle underlying the CLE's linguistic analysis process.
 Exploiting the ``stratified'' nature of the EBL-specialized grammar, we group the chunked rules by level, and apply them one level at a time, starting at the bottom.
 After each level, constituent pruning is used to eliminate unlikely constituents.
 The intent is to achieve a trainable robust parsing model, which can return a useful partial analysis when no single global analysis is found.
 An initial implementation exists, and is currently being tested; preliminary results here are also very positive.
 We expect to be able to report on this work more fully in the near future.
 