  Many theories of semantic interpretation use -term   CCG is a grammatical formalism in which there is a one-to-one correspondence between the rules of composition at the level of syntax and logical form.
 Each word is (perhaps ambiguously) assigned a category and LF, and when the syntactical operations assign a new category to a constituent, the corresponding semantic operations produce a new LF for that constituent as well.
 The CCG rules   shown in Figure 1 are implemented in the system described in this paper.
 Each of the three operations have both a forward and backward variant.
   As an illustration of how the semantic rules can be simulated in first-order unification, consider the derivation of the constituent harry found, where harry has the category np with LF harry' and found is a transitive verb of category with LF (5)   In the CCG formalism, the derivation is as follows: harry gets raised with the ]T rule, and then forward composed by the ]B rule with found, and the result is a category of type s/np with LF .
 In section 3 it will be seen how the use of abstract syntax allows this to be expressed directly.
 In first-order unification, it is simulated as shown in Figure 2.
   The final CCG rule to be considered is the coordination rule that specifies that only like categories can coordinate: (6) X conj X =] X This is actually a schema for a family of rules, collectively called ``generalized coordination'', since the semantic rule is different for each case.
 For example, if X is a unary function, then the semantic rule is (7a), and if the functions have two arguments, then the rule is (7b).
 (7a) (7b) For example, when processing (1a), rule (7a) would be used with: with the result     which is -equivalent to (2).
   Prolog   A primary goal of abstract-syntax is to support recursion through abstractions with bound variables.
 This leads to the interpretation of a bound variable as a ``scoped constant'' - it acts like a constant that is not visible from the top of the term, but which becomes visible during the descent through the abstraction.
 See for a discussion of how this may be used for evaluation of functional programs by ``pushing'' the evaluation through abstractions to reduce redexes that are not at the top-level.
 This technique is also used in the -reducer briefly mentioned at the end of the previous section, and a similar technique will be used here to implement coordination by recursively descending through the two arguments to be coordinated.
   Before describing the implementation of coordination, it is first necessary to mention how CCG categories are represented in the Prolog   We have shown how higher-order logic programming can be used to elegantly implement the semantic theory of CCG, including the previously difficult case of its handling of coordination constructs.
 The techniques used here should allow similar advantages for a variety of such theories.
   An argument can be made that the approach taken here relies on a formalism that entails implementation issues that are more difficult than for the other solutions and inherently not as efficient.
 However, the implementation issues, although more complex, are also well-understood and it can be expected that future work will bring further improvements.
 For example, it is a straightforward matter to transform the Prolog   This work is supported by ARO grant DAAL03-89-0031, DARPA grant N00014-90-J-1863, and ARO grant DAAH04-94-G-0426.
 I would like to thank Aravind Joshi, Dale Miller, Jong Park, and Mark Steedman for valuable discussions and comments on earlier drafts.
 