 The system interprets an extended DCG formalism to produce a robust analyser that finds parses of the input made from `islands' of terminals (corresponding to terminals consumed by successful grammar rules  The behaviour of LHIP can best be understood in terms of the notions of island, span, cover and threshold: Island: Within an input string consisting of the terminals , an island is a subsequence , whose length is m + 1 Span: The span of a grammar rule R is the length of the longest island such that terminals ti and tj are both consumed (directly or indirectly) by R These include: =1=2em lhip_success Lists successful rules, indicating island position and coverage As previously mentioned, LHIP facilitates a cyclic approach to grammar development Suppose one is writing an English grammar for the Map Task Corpus, and that the following is the first attempt at a rule for noun phrases (with appropriate rules for determiners and nouns np(N, D, A) # 0 Cover: A rule R is said to cover m items if m terminals are consumed within the island described by R With this rule, one can now handle such phrases as the left-hand bottom corner, and a banana tree Suppose further that this rule is now applied to the corpus, and then the rule is applied again but with a local threshold level of 1 In this way, the strictness of a rule may be varied according to information originating either within the particular run-time invocation of the rule, or elsewhere in the current parse Once a given rule or set of rules is stable, and the writer is satisfied with the performance of that part of the grammar, a local threshold value of 1 may be assigned so that superfluous parses will not interfere with work elsewhere Threshold: The threshold of a rule is the minimum value for the ratio of its coverage c to its span s which must hold in order for the rule to succeed As implied here, rules need not cover all of the input in order to succeed First, the `ignore' facility permits different categories of unidentified input to be distinguished Ignore rules have a similar functionality to that of normal rules In particular, they can have arguments, and may therefore be used to assign a structure to unidentified input so that it may be flagged as such within an overall parse Currently, also, results are returned in an order determined by the order of rules in the grammar Moreover, an island may itself contain input which is unaccounted for by the grammar There are two notions of non-coverage of the input: sanctioned and unsanctioned non-coverage Sanctioned non-coverage means that some number of special `ignore' rules have been applied which simulate coverage of input material lying between the islands, thus in effect making the islands contiguous These ignore rules can be invoked individually or as a class Strict adjacency between RHS clauses can be specified in the grammar It is possible to define global and local thresholds for the proportion of the spanned input that must be covered by rules; in this way, the user of an LHIP grammar can exercise quite fine control over the required accuracy and completeness of the analysis In addition, feedback is given to the grammar writer on the degree to which the grammar is able to cope with the given input; in a context of grammar development, this may serve as notification of areas to which the coverage of the grammar might next be extended Heads serve as anchor-points in the input string around which islands may be formed, and are accordingly treated before non-head items (RHS items are re-ordered during compilation-see below  First, we define what constitutes an acceptable LHIP grammar, second, we describe the process of converting such a grammar into Prolog code, and third, we describe the analysis of input with such a grammar LHIP grammars are an extended form of Prolog DCG grammars one or more RHS clauses may be nominated as heads; 2 one or more RHS clauses may be marked as optional; 3 `ignore' rules may be invoked; 4 adjacency constraints may be imposed between RHS clauses; 5 a global threshold level may be set to determine the minimum fraction of spanned input that may be covered in a parse, and 6 a local threshold level may be set in a rule to override the global threshold within that rule We provide a syntactic definition (below) of a LHIP grammar rule, using a notation with syntactic rules of the form which indicates that the category C may take any of the forms F1 to Fn A LHIP grammar rule has the form: lhiprule [ ] term [ ] lhipbody where T is a value between zero and one If present, this value defines the local threshold fraction for that rule This local threshold value overrules the global threshold The symbol ` ' before the name of a rule marks it as being an `ignore' rule Only a rule defined this way can be invoked as an ignore rule in an RHS clause Parentheses may be used to resolve ambiguities A rule name is a Prolog term, and only rules and terminal items may act as heads within a rule body As previously said, the purpose of ignore rules is simply to consume input terminals, and their intended use is in facilitating repairs in analysing input that contains the false starts, restarts, filled pauses, etc If used in a rule body, they indicate that input is potentially ignored-the problems that ignore rules are intended to repair will not always occur, in which case the rules succeed without consuming any input There is a semantic restriction on the body of a rule which is that it must contain at least one clause which necessarily covers input (optional clauses and ignore rules do not necessarily cover input  The following is an example of a LHIP rule How is such a rule converted into Prolog code by the LHIP system? First, the rule is read and the RHS clauses are partitioned into those marked as heads, and those not LHIP provides a processing method which allows selected portions of the input to be ignored or handled differently These arguments are used for the input, the start and end points of the area of the input in which the rule may succeed, the start and end points of the actual part of the input over which it in fact succeeds, the number of terminal items covered within that island, a reference to the point in the chart where the result is stored, and a list of pointers to sub-results The chief modifications to the standard Prolog `grammar rule' format are of two types: one or more right-hand side (RHS) items may be marked as `heads and one or more RHS items may be marked as `ignorable  The `s(conjunct rule shown above is a case in point LHIP provides a number of ways of applying a grammar to input The simplest allows one to enumerate the possible analyses of the input with the grammar With the threshold level set to 0, all analyses possible with the grammar by deletion of input terminals can be generated Thus, supposing a suitable grammar, for the sentence John saw Mary and Mark saw them there would be analyses corresponding to the sentence itself, as well as John saw Mary, John saw Mark, John saw them, Mary saw them, Mary and Mark saw them, etc Hence, Mark saw them would receive a valid analysis, as would Mary and Mark saw them, provided that the grammar contains a rule for conjoined NPs; John saw them, on the other hand, would not