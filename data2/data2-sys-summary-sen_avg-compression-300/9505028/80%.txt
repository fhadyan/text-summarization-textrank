 We define a new grammar formalism, called D-Tree Grammars (DTG which arises from work on Tree-Adjoining Grammars (TAG)  In LTAG, the operations of substitution and adjunction relate two lexical items We now describe informally a structure that can be used to encode a DTG derivation Each d-edge in elementary d-trees has an associated subsertion-insertion constraint (SIC  A SIC is a finite set of elementary node addresses (ENAs  An ENA specifies some elementary d-tree , a component of and the address of a node within that component of  Each node of elementary d-trees has an associated sister-adjunction constraint (SAC  Every d-tree is a projection from a lexical anchor A SIC is associated with the d-edge between VP and S node in the seems d-tree to ensure that no node labelled S' can be inserted within it - i We then subsert this structure and the subject into the to adore d-tree We subsert the resulting structure into the seems clause by substituting its maximal projection node, labelled VP[fin: at the VP[fin: frontier node of seems, and by inserting the subject into the d-edge of the seems tree Now, only the S node of the seems tree (which is its maximal projection) is substitutable Finally, we subsert this derived structure into the claims d-tree by substituting the S node of seems at the S complement node of claims, and by inserting the object of adores (which has not yet been used in the derivation) in the d-edge of the claims d-tree above its S node The derived tree is shown in Figure  The SA-tree for this derivation corresponds to the dependency tree given previously in Figure  We first subsert the to adore d-tree into the seems tree as above, by substituting the anchor component at the substitution node of seems We insert the subject component of to adore above the anchor component of seems We then subsert this derived structure into the claims tree by substituting the root of the subject component of to adore at the S node of claims and by inserting the S node of the seems d-tree as well as the object component of the to adore d-tree in the S S d-edge of the claims d-tree The resulting phrase structure tree would be the same as in the previously discussed derivation, but the derivation structure is linguistically meaningless, since to adore would have been subserted into both seems and claims However, this derivation is ruled out by the restriction that only substitutable components can be substituted: the subject component of the adore d-tree is not substitutable after subsertion into the seems d-tree, and therefore it cannot be substituted into the claims d-tree We observe in passing that the SIC associated to the d-edge in the seems d-tree also rules out this derivation The derivation requires that the S node of seems be inserted into the S S d-edge of claims The derivation proceeds as follows We first subsert the embedded clause tree into the matrix clause tree The derived structure is shown in Figure  The associated SA-tree is the desired, semantically motivated, dependency structure: the embedded clause depends on the matrix clause This information is encoded in the derivation tree  Each elementary structure can be associated with a lexical item (as in Lexicalized TAG (LTAG) e of the predicate-argument and modification structure For instance, English sentence ( ) gets the derivation structure shown on the left in Figure  When comparing this derivation structure to the dependency structure in Figure , the following problems become apparent This gives us the derivation structure shown on the right in Figure  Vijay-Shanker points out that use of adjunction for clausal complementation in TAG corresponds, at the level of dependency structure, to substitution at the foot node of the adjoined tree Section briefly discusses DTG recognition algorithms A d-tree is a tree with two types of edges: domination edges (d-edges) and immediate domination edges (i-edges  D-edges and i-edges express domination and immediate domination relations between nodes D-trees can be composed using two operations: subsertion and sister-adjunction When a d-tree is subserted into another d-tree , a component of is substituted at a frontier nonterminal node (a substitution node) of and all components of that are above the substituted component are inserted into d-edges above the substituted node or placed above the root node In the composed d-tree the component is substituted at a substitution node in  In general, when a component of some d-tree is inserted into a d-edge between nodes and two new d-edges are created, the first of which relates and the root node of , and the second of which relates the frontier node of that dominates the substituted component to  When a d-tree is sister-adjoined at a node in a d-tree the composed d-tree results from the addition to of as a new leftmost or rightmost sub-d-tree below  A DTG is said to be lexicalized if each d-tree in the grammar has at least one terminal node The elementary d-trees of a grammar G have two additional annotations: subsertion-insertion constraints and sister-adjoining constraints The SAtree for consists of a single node labelled by the elementary d-tree name for 