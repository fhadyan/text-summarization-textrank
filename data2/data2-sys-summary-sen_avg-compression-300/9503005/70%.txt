 Unlike most linguistic theories, LFG (see Kaplan and Bresnan (1982 treats grammatical relations as first class citizens Accordingly, it casts its linguistic analyses in terms of a composite ontology: two independent domains a domain of constituency information (c-structure and a domain of grammatical function information (f-structure) linked together in a mutually constraining manner Clearly, this construct is closely related to the Kasper Rounds path equality (see Kasper and Rounds (1990 the principle difference is that whereas the Kasper Rounds enforces path equalities within the domain of feature structures, the LFG path equality enforces equalities between the tree domain and the feature structure domain That is, we state in which trees and feature structures are admissible, and how tree and feature based information is to be synchronised; examples will be given shortly Now, a model is simply a mathematical embodiment of LFG sentence structure, thus those models in which is valid are precisely the sentence structures which embody all our grammatical principles Viewing the LFG ontology in such terms does no violence to intuition: indeed, as we shall see, a more direct mathematical embodiment of the LFG universe can hardly be imagined Now for some examples Let's first consider how to write specifications which capture the effect of schemata annotated grammar rules Moreover, n1 must be associated with an f-structure node w' which can also be reached by making a transition from the f-structure node w associated with the mother node of m (In other words, that part of the f-structure that is associated with the NP node is re-entrant with the value of the subj feature in the f-structure associated with the S node And finally, n2 must be associated with that f-structure node w which m (In other words, the part of the f-structure that is associated with the VP node is re-entrant with that part of the f-structure which is associated with the S node In short, we have captured the effect of an annotated rule purely declaratively Once the ontological issues have been settled we turn to our ultimate goal: providing a specification language for LFG grammars In any realistic LFG grammar there will be several often many such annotated rules, and acceptable c-structures are those in which each non-terminal node is licensed by one of them This picks precisely those models in which all the tree nodes are appropriately licensed We now turn to the second main component of LFG, the well formedness conditions on f-structures Consider first the uniqueness principle In essence, this principle states that in a given f-structure, a particular attribute may have at most one value Actually, with the ontological issues settled it is a relatively simple task to devise suitable specification languages: we simply consider how LFG linguists talk about such structures when they write grammars Second, we have modeled features as partial functions on the f-structure nodes - this ensures that any complex valued attribute is either undefined, or is associated with a unique sub-part of the current f-structure In LFG, this applies to a (small) finite number of attributes (that is, transitions in the feature structure  Now, the completeness principle requires that any of these features appearing as an attribute in the value of the pred attribute must also appear as an attribute of the f-structure immediately containing this pred attribute, and this recursively This applies to the same attributes as the completeness principle and requires that whenever they occur in an f-structure they must also occur in the f-structure associated with its pred attribute Although the LFG equations discussed so far were defining equations, LFG also allows so-called constraining equations (written =c  Defining equations allow a feature-value pair to be inserted into an f-structure providing no conflicting information is present That is, they add a feature value pair to any consistent f-structure The essential difference is that constraining equations require that the feature under consideration already has a value, whereas defining equations apply independently of the feature value instantiation level The bulk of LFG involves stating constraints about a single model, and is well equipped for this task, but constraining equations involve looking at the structure of other possible parse trees After a brief introduction to LFG, we isolate a class of models which obviously mirrors the composite nature of the LFG ontology, and then turn to the task of devising a language for talking about them One of the most striking features of LFG (and indeed, GPSG) is the way that purely structural (that is, model theoretic) argumentation dominates We illustrate its use by showing how to capture the effect of schemata annotated rules, and the LFG uniqueness, completeness and coherence principles Models do not in any sense code the LFG ontology: they take it pretty much at face value However standard formalisations of LFG do not capture its strikingly simple underlying intuitions A lexical functional grammar consists of three main components: a set of context free rules annotated with schemata, a set of well formedness conditions on feature structures, and a lexicon The role of these components is to assign two interrelated structures to any linguistic entity licensed by the grammar: a tree (the c-structure) and a feature structure (the f-structure  Briefly, the up- and down-arrows in the schemata can be read as follows: denotes the value of Feature in the f-structure associated with the tree node immediately dominating the current tree node, whereas denotes the value of Feature in the f-structure associated with the current tree node For instance, in rule (1) the NP schema indicates that the f-structure associated with the NP node is the value of the subj feature in the f-structure associated with the mother node Instead, they make a detour via the LFG construction algorithm, which explains how equational constraints linking subtrees and feature structures are to be resolved As for the VP schema, it requires that the f-structure associated with the mother node is identical with the f-structure associated with the VP node Moreover, the resulting f-structure respects the LFG well formedness conditions, namely the uniqueness, completeness and coherence principles discussed in section 5 The ontology underlying LFG is a composite one, consisting of trees, feature structures and links between the two In this section, we introduce such a representation of LFG ontology In the following section, we shall present a formal language for talking about this representation; that is, a language for specifying LFG grammars A model is a tripartite structure , where is our mathematical picture of c- structure, our picture of f-structure, and zoomin our picture of the link between the two This is a standard way of viewing feature structures, and is appropriate for LFG We define a specification language in which (most of) the interactions between c- and f-structure typical of LFG grammars can be stated directly Finally, we take zoomin, the link between c-structure and f-structure information, to be a partial function from T to W This completes our mathematical picture of LFG ontology Although models pin down the essence of the LFG universe, our work has only just begun Bearing this advice in mind, let us consider the nature of LFG grammars The key idea underlying our approach is to think about LFG model theoretically Firstly, LFG grammars impose constraints on  Secondly, LFG grammars impose general constraints on various features in  Thirdly, LFG grammars impose constraints on zoomin That is, our first task will be to give a precise and transparent mathematical picture of the LFG ontology As has already been noted, the basic entities underlying the LFG analyses are composite structures consisting of a finite tree, a finite feature structure, and a function that links the two Then is satisfied at a tree node t iff there is a feature structure node w that can be reached from t by making both the transition sequence St ;zoomin; Sf and the transition sequence St' ;zoomin; Sf 