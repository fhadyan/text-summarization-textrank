 First we will show, that the complexity of a unification grammar theory may be higher than the complexity of its feature theory and constituent structure components Second we will explain, that the complexity of a unification grammar may be lower than the complexity of the formalized feature theory The first proof implies that the complexity of a feature theory does not provide an upper bound for the complexity of grammars using that feature theory The second proof implies that the complexity of a feature theory might not provide a lower bound for the complexity of grammars using that feature theory \t\t 3 ProofFrom , Proposition 5 From Johnson's work, we see that combining problems may change the complexity from decidable to undecidable We claim that combining problems may change also the complexity from tractable to intractable In the next section we will present a fixed regular grammar The next section contains the preliminaries on complexity theory and feature theory However, the one presented, as will be seen later, is sufficient for our purposes here: that is, the reduction from SATISFIABILITY There are multiple formalisms for unification grammars Table contains the grammar rules of unification grammar G In Section , we introduce a simple feature theory: a feature theory with only reentrance In Section , we present a unification grammar that uses this simple feature theory We show that the recognition problem of this grammar is harder than the unification problem of the feature theory and the recognition problem of the constituent structure component This T derives in b steps Finally, this A derives in csteps Both the recognition problem of this regular grammar, and the satisfiability problem of this feature theory take polynomial time In Section , we explain why the recognition problem of a unification grammar might be of lower complexity than the unification problem of the feature theory In complexity theory one tries to determine the complexity of problems The feature structure associated with T is the unification of and the feature structure associated with S: where if , and if  The feature structure associated with S0 is None of the unifications fails, and thus S derives wm By fact , where  Obviously, if, and only if,  Lemma proves that this reduction f is computable in polynomial time An additional NP upper bound is proven for an arbitrary string and grammar, which results in an NP-complete recognition problem Lemma 4 The second check is performed by the algorithm FEATUREGRAPHSAT from Section  Clearly, both checks only take polynomial time For instance, let problem A be the complement of problem B In some specific situations, however, these reductions do not exist Consider for instance the class of grammars that generate a finite language The combination of a feature theory with a grammar from this class yields a unification grammar that generates a finite language Obviously, the recognition problem of this unification grammar does not depend on the unification problem of the feature theory This happens when the unification grammar formalism restricts the unification For instance, the unification grammar formalism may demand that feature structures are unified at the outermost attributes However, there is no predefined way to construct unification grammars from a feature theory and a grammar component So, there may be many blurred restrictions on the unification In this paper, we have assessed the complexity results of formalizations that intend to describe feature theories in computational linguistics These formalizations do not take the constituent structure component of unification grammars into account These unification grammars consist of constituent structure components, and feature theories In this section we will present a simple feature theory Although this feature theory is simple, it contains many aspects from other feature theories