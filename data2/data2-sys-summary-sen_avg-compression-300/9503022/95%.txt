 \t\t 3 ProofFrom , Proposition 5 From Johnson's work, we see that combining problems may change the complexity from decidable to undecidable We claim that combining problems may change also the complexity from tractable to intractable In the next section we will present a fixed regular grammar The next section contains the preliminaries on complexity theory and feature theory There are multiple formalisms for unification grammars Table contains the grammar rules of unification grammar G In Section , we present a unification grammar that uses this simple feature theory Finally, this A derives in csteps Both the recognition problem of this regular grammar, and the satisfiability problem of this feature theory take polynomial time In Section , we explain why the recognition problem of a unification grammar might be of lower complexity than the unification problem of the feature theory The feature structure associated with S0 is None of the unifications fails, and thus S derives wm By fact , where  Obviously, if, and only if,  Lemma proves that this reduction f is computable in polynomial time Lemma 4 The second check is performed by the algorithm FEATUREGRAPHSAT from Section  Clearly, both checks only take polynomial time For instance, let problem A be the complement of problem B In some specific situations, however, these reductions do not exist Consider for instance the class of grammars that generate a finite language Obviously, the recognition problem of this unification grammar does not depend on the unification problem of the feature theory This happens when the unification grammar formalism restricts the unification However, there is no predefined way to construct unification grammars from a feature theory and a grammar component So, there may be many blurred restrictions on the unification In this paper, we have assessed the complexity results of formalizations that intend to describe feature theories in computational linguistics