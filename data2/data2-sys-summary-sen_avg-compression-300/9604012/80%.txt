 Yet, two-level formalisms fell short from providing elegant means for the description of non-linear operations such as infixation, circumfixation and root-and-pattern morphology Listing 1 The linguist provides SemHe with three pieces of data: a lexicon, two-level rules and word formation grammar The resulting stems are assigned 1 (Rules 3-4 in Listing 8  However, some stems require verbal inflectional markers other imperfect forms  All entries take the form of Prolog terms Rules 5-8 (Listing 8) handle this Using tree-adjoining grammars might be a possibility 50 rules  category forms) in the form of a list-of-lists, where the ith item must unify with the feature-structure of the morpheme affected by the rule on the ith lexical tape 2nd masc  Word formation rules take the form of unification-based CFG rules, The following example illustrates the derivation of Syriac /ktab/ `he wrote' (in the simple p`al measure) from the pattern morpheme {cvcvc} `verbal pattern root {ktb} `notion of writing and vocalism {a  The three morphemes produce the underlying form katab which surfaces as /ktab/ since short vowels in open unstressed syllables are deleted The two-level grammar (Listing 1) assumes three lexical tapes R4 is the obligatory vowel deletion rule There are two current methods for implementing two-level rules (both implemented in SemHe (1) compiling rules into finite-state automata (multi-tape transducers in our case and (2) interpreting rules directly Additionally, the interpreter facilitates the incremental compilation of rules by simply allowing the user to toggle rules on and off The lexical component is implemented as character tries , one per tape In analysis, surface expressions are assigned the most significant bits, while lexical expressions are assigned the least significant ones Rules are then reasserted in the order of their precedence value Listing 2 Listing 3 Listing 4 Listing 5 Listing 6 The algorithms presented below are given in terms of prolog-like non-deterministic operations TWO-LEVEL-ANALYSIS (Listing 6) is the main predicate It takes a surface string or lexical string(s) and returns a list of partitions and a morphosyntactic parse tree To analyse a surface form, one calls TWO-LEVEL-ANALYSIS Surf, -Lex, -Partition, -Parse  To generate a surface form, one calls TWO-LEVEL-ANALYSIS Surf, +Lex, -Partition, -Parse  Listing 7 When developing Semitic grammars, one comes across various issues and problems which normally do not arise with linear grammars Hence, lexical descriptions of stems make use of three lexical tapes (pattern, root vocalism while those of prefixes and suffixes use the first lexical tape This requires duplicating rules when stating lexical constraints Consider rule R4 (Listing 1  Rule R7 (Listing 7) is required One might suggest placing constraints on surface expressions instead However, doing so causes surface expressions to be dependent on other rules This produces four rules of the form of R4, but with the following expressions for Lex and RLC: Orthographically, Semitic texts are written without short vowels We assume full vocalisation in writing rules A second set of rules can allow the deletion of vowels Listing 8 Finite-state models of two-level morphology implement morphotactics in two ways: using `continuation patterns/classes' , , or unification-based grammars ,  A stem whose stem morpheme is known is assigned 2 (Rules 1-2 in Listing 8 