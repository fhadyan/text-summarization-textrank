 The default body describes how to continue processing with defaults in an adequate way If several default preconditions are applicable, the certainty values for default descriptions are examined to find which provides the system with the most plausible action The individual default descriptions should take into account the global constraints for processing stated in the knowledge sources of the system The repair of false assumptions is a crucial point of default handling in the context of incremental processing because the default information does not remain locally but can cause further decisions of the system Contrarily, for non-incremental input there will be no value given that can contradict default values Thus the effect of a default body may be propagated through the entire system (e Roughly speaking, withdrawing a default assumption can be realized by backtracking to the earlier state of the system where the default had been introduced or by non-monotonic changes to the current state of the system In this framework, cancelling defaults requires the system to identify which results are caused by default handling So, we end up with a processing-conforming default handler for generation realizing repair by non-monotonic changes The adaptation of our general discussion of default handling to the system VM-GEN not only provides concrete examples for the reader but also shows that a homogeneous combination of default handling, regular processing, and utterance repair is possible VM-GEN is able to consume input increments of varying size In the following, we introduce examples for default processing triggered during the German inflection process in VM-GEN to substantiate the global statements made in section 2 This information has partly to be specified in the input (e The default for missing number information in VM-GEN would look as follows: The set of default preconditions is applied to all objects (OBJ) of VM-GEN in order to test the kind of underspecification number' in the example  The default body introduces a new value (sg) by creating an input increment as a default In case of contradictions the default and all default-caused decisions are revised (see below  If, e This rule is represented in the grammar as a part of the description of subcategorization frames for verbs The advantage of this approach is, that processing is continued in a consistent way, which eases the introduction of the input-licensed value Elements are uttered before the processing or input consumption has been finished Evaluating the default body, the system creates a V-object OBJ  Additionally, the first position can be assigned to the subject which can be uttered nowe to model a flexible input interface der Besucher h dieser Termin wird von dem Besucher gewnscht  This paper proposes a processing-conforming default handler for generation realizing repair by non-monotonic changes We provide the system with default descriptions The set of default preconditions expresses possible reasons for dead-end situations A default is triggered, if the preconditions match the current situation and the certainty value of the default exceeds the predefined threshold The default body is expressed in terms of the missing input specification in order to make the system work homogeneously We have verified the advantages of processing-conforming default handling by implementing a default handler for VM-GEN As future work, we will extend the default preconditions towards handling complex contextual information In the underlying knowledge sources language-specific constraints are defined We intend to use core knowledge sources for representing common phenomena Internal decisions are made on the basis of the specified input Generally speaking, default handling specifies how processing, ie further decision-making, can continue without sufficient input information So, one can compare default handling with advice to the system Basically, the processing-conforming mode makes the overall system homogeneous because the combination of default-caused processing and input-licensed processing requires no specific description The homogeneity becomes especially helpful in the case where the input verifies the default assumption rendering unnecessary any recomputation Unfortunately, input information can be insufficient in two respects: If the input structure for generation is provided by another AI-system, global problems in producing sufficient input information for the generator may occur, e For the opposite case where the default must be withdrawn we have to mark all defaults Even more homogeneity is introduced to an incremental system if the default descriptions are given in terms of input specifications This representation allows for easy checking the coincidence between a chosen default and input given later Section 2 provides a general description for defaults in generation emphasizing the specific requirements in an incremental system1 the application of a default (section 23) is outlined The crucial case of removing defaults not coinciding with newly arriving input in an incremental system is discussed in section 2 Later on, default handling is included and exemplified for two general cases Furthermore, we discuss how default handling can be adapted to multilingual generation, as required by the speech-to-speech translation system VERBMOBIL (Block et al 1992 e by making assumptions about the missing input specification how default handling is integrated into a system (see section 2 how the knowledge for default handling is described (see section 2 In incremental generation, as mentioned in section 1, interleaved input consumption and output production causes specific default situations We define as default situation the situation where a generation system has not yet finished the utterance but at the same time has consumed all given input and is not able to continue processing Thus, default handling should be triggered immediately In incremental generation, however, the system may get a new piece of information later on that enables it to continue processing (e Therefore, possible alternatives are either to wait for the next input or to trigger default handling Furthermore, the certainty of a default is described by a value As soon as a default situation is identified, the certainty of the default is checked to see whether it exceeds a predefined threshold that determines the degree of fluency/reliability Each application of a default decreases the global certainty of the system's state Basically, there are two strategies to integrate default handling into ongoing processing Furthermore, the designer of the default component is completely free in deciding about the realization of defaults in the system Alternatively, the ongoing processing can deal with the default values in an ordinary manner (processing-conforming default handling  For incremental generation, the system has to provide repair facilities in any case The knowledge source that is used for default handling should provide the most plausible actions for a default situation We represent the knowledge as a set of heuristic rules called default descriptions A default description has the following form: The set of default preconditions defines tests that are applied to the given situation in order to find out whether the corresponding default body can be activated