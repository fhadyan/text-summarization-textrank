 By itself, however, good syntactic processing may not provide much `competitive advantage' to an NLG system An NLG system could, for example, take sentence-length constraints into account when making aggregation decisions Templates, of course, also have advantages over NLG There are very few people who can build NLG systems, compared to the millions of programmers who can build template systems; there is also very little awareness of what NLG can (and cannot) do among most developers of application systems It is of course possible to build ATG systems that use both NLG and template techniques Systems that use NLG techniques for `high-level' operations such as content planning, but templates for low-level realization (eg,  The basic goal of such systems is to use NLG where it really `adds value and to use simpler approaches where NLG is not needed or would be too expensive Developers will use NLG modules and techniques if NLG helps them produce the kind of texts they want to produce; if an NLG system is seen not as a helpful tool but as something that needs to be worked around, it will not be used NLG should also only be used when it clearly increases maintainability, text readability, or some other important attribute of the target application system I believe, by the way, that most current hybrid systems use `real NLG' in content-determination and perhaps sentence-planning, and use template techniques mainly in syntactic realization Hybrid Systems: It seems safe to predict that many fielded NLG systems, at least in the near term, will use a hybrid approach, ie, they will use both template and NLG technology Anything that makes it easier to build knowledge bases will probably make it easier to build NLG systems As NLG technology begins to move out of the lab and into real applications, the NLG community needs to begin thinking not just about how to generally improve our understanding of this research area, but also about questions such as (a) what advantages NLG offers over simpler approaches; (b) under what circumstances using NLG `adds value' to real-world systems; and (c) where further advances in NLG could really increase the usefulness of applied NLG systems This is an example of conditional text We as yet have little data on how easy/difficult it really is to maintain fielded NLG systems; is the only paper I am aware of that discusses the maintenance of fielded NLG systems Most applied NLG systems have a sentence planning module that handles aggregation, referring-expression generation, sentence formation, and lexicalization  It is straightforward, in contrast, for an NLG system to handle such phenomena