 A tight integration between word and sentence level processing also has linguistic advantages The implementation of typed feature structures in our system makes use of the CLP facilities provided by this enhanced Prolog system Feature structures are implemented by the attribute fs(Type,Dag,Goals where Dag is a list of feature-value pairs (which is empty in case of atomic types) or a marker indicating uninstantiatedness of the substructure (feature structures are instantiated lazily  Well-typed unification of two feature structures is implemented via the constraint solving clauses mentioned above, taking into account type hierarchy and feature appropriateness (for a detailed description cf Constraints imposed onto feature structures by the principles of grammar are stated in a conditional form where the antecedent is restricted to contain only typing requirements In order to account for these conditional constraints we adopt a licensing view: Every node of a feature structure has to be licensed by all principles of grammar A node is licensed by a principle if either (i) the feature structure F rooted in that node satisfies the applicability conditions of the principle and the constraints expressed by the principle successfully unify with F, or (ii) the feature structure F rooted in that node is incompatible with the applicability conditions of the principle The interesting case arises when a feature structure does not satisfy the applicability conditions of the principle but is compatible with them As an example take the well known Head Feature Principle of HPSG (Fig In this way constraints involving relational dependencies (such as the Subcategorization Principle and the morphological relation between a lexical and a surface string) can be expressed within the feature formalism and there is no need for external devices controlling this interaction Furthermore, the conditional constraint syntax is not restricted to unary licensing principles but can also be used to express relations, such as fs_append/3 needed for implementing the Subcat Principle which appends two feature structure lists (Fig In the case of analysis, the feature structure representing the word form was transmitted to the parser For generation, X2MORF expected a feature structure as input reproducing one or more word forms These rules are compiled into Prolog clauses relating the lexical and surface character streams appropriately (see Fig The central relation is the morphology predicate, (see Fig ) mediating between lexical string, surface string (with inserted null elements the pure (denullified) surface string and the feature structure of the morphological sign The integration of the two-level relation into the general framework of the feature based sentence-level and word-level grammars is now performed by adding this relation as a principled constraint at the appropriate level The application of the two-level rules relating the surface string (i As a result of this constraint interaction the structure shown in Fig The system is built upon a unification engine implemented in a CLP language supporting types and definite relations as part of feature descriptions Using this extended feature formalism, which is independently motivated by requirements of standard HPSG, a reimplementation of X2MORF was integrated into the grammar as a specialized relation One step is the description of word formation in terms of a unification-based grammar to make the result of morphological processing directly available to syntax and vice versa, an approach already taken in X2MORF , , an extension of two-level morphology A widely used approach is finite-state morphology, most notably two-level morphology (for an introduction, see  Head-driven Phrase Structure Grammar (HPSG, PS1, PS2) can be viewed as a mono-level but multi-stratal theory of grammar, where different strata relate to different aspects of linguistic information, but are represented uniformly in feature logics Though morphology is not considered in the standard approach, it suggests itself to be included as a fourth stratum by introducing a feature MORPH into the type sign Morphotactics are easily described in terms of a feature based grammar encode finite state automata directly in the feature formalism In general, introducing automata into feature structures and encoding morphophonology directly at that level seems to be too low-level argue against the use of two-level morphology because of linguistic considerations Our grammar is encoded using a unification engine based on constraint logic programming (CLP  Thus X2MORF is treated as one special relation of the grammar X2MORF differs from standard two-level morphology in two important respects X2MORF uses a morph lexicon where each morph has one or more feature structures assigned The word grammar itself is simple The other extension concerns the two-level rules, which are supplemented with a morphological filter consisting of a feature structure Reflecting the current trend in syntax towards lexicalism, unification-based systems use highly structured feature structures as input X2MORF can be seen as a relation between a surface string (the word form a lexical string, and a feature structure (the interpretation of the word form  HPSG employs strongly typed feature structures together with principles constraining them further Well-typedness requirements restrict the space of valid feature structures (cf Every feature structure must be associated with a type, and every type restricts its associated feature structure in that only certain features are allowed and the values of these features must be of a certain type The second source of constraints, in order to admit only linguistically valid feature structures, are the principles of grammar PS1 allow general implicative and negative constraints in the form of conditional feature structures Besides constraints enforcing simple structure sharing (eg the Head Feature Principle given in Fig Constraints like these go beyond the expressivity of pure feature formalisms alone and need to be defined in a recursive manner In order to integrate such complex constraints in the feature unification framework we interpret unification of typed feature structures under the restrictions of principled constraints as constraint solving in the CLP paradigm 