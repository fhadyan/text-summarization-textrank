 Describing objects is one of several purposes for which linguists use feature structures Each type denotes a set of objects in I The denotations of the species partition U, and S assigns each object in I the unique species whose denotation contains the object: object u is in the denotation of species iff  Appropriateness encodes a relationship between the denotations of species and attributes: if is defined then the denotation of attribute acts upon each object in the denotation of species to yield an object in the denotation of type , but if is undefined then the denotation of attribute acts upon no object in the denotation of species  So, if is defined then the denotation of attribute acts upon each object in the denotation of type to yield an object in the denotation of type  ] ] ] Each feature structure is a connected Moore machine (see [ with finitely many states, input alphabet , and output alphabet  ] ] ] ] [ Definition F is a satisfiable feature structure iff [ F is a feature structure, and for some interpretation I and some object u in I, F is true of u under I Therefore, any use of a feature structure to describe an object demands that the feature structure can be interpreted as true or false of the object ] ] The abundance of interpretations seems to preclude an effective algorithm to decide if a feature structure is satisfiable However, I insert morphs between feature structures and objects to yield an interpretation free characterisation of a satisfiable feature structure In this paper, I tailor the semantics of [ ] to suit the typed feature structures of [ and so create an explicit interpretation of a typed feature structure used as a description ] ] ] ] A feature structure approximates a morph iff the Moshier abstraction of the feature structure abstractly subsumes (see [ the morph [ Proposition For each interpretation I, each object u in I and each feature structure F, [ [ F is true of u under Iiff F approximates the abstraction of u under I ] ] ] [ Theorem For each feature structure F, [ F is satisfiable iff F approximates some morph I then use this interpretation to define the notion of a satisfiable feature structure ] Though theorem gives an interpretation free characterisation of a satisfiable feature structure, the characterisation still seems to admit of no effective algorithm to decide if a feature structure is satisfiable However, I use theorem and resolved feature structures to yield a less general interpretation free characterisation of a satisfiable feature structure that admits of such an algorithm [ Definition R is a resolved feature structure iff [ R is a feature structure , is a total function from Q to , and for each and each , [ [ if is defined then is defined, and  ] ] ] ] Each resolved feature structure is a well-typed (see [ feature structure with output alphabet  [ Definition R is a resolvant of F iff [ R is a resolved feature structure , F is a feature structure , and for each ,  ] ] [ Proposition For each interpretation I, each object u in I and each feature structure F, [ [ F is true of u under Iiff some resolvant of F is true of u under I ] ] ] [ Proposition If is rational then for each resolved feature structure R, R is satisfiable Though no feature structure algebra provides descriptions as expressive as those provided by a feature logic, using feature structures to describe objects profits from a large stock of available computational techniques to represent, test and process feature structures ] [ Theorem If is rational then for each feature structure F, [ F is satisfiable iff F has a resolvant ] In this section, I use theorem to show how - given a rational signature that meets reasonable computational conditions - to construct an effective algorithm to decide if a feature structure is satisfiable ] ] ] ] ] [ Proposition If is computable then for some effective function , [ for each feature structure F, [ a list of the resolvants of F In this paper, I demonstrate the computational benefits of marrying a tractable syntax and an explicit semantics by creating a simple and effective algorithm to decide the satisfiability of a feature structure ] ] ] Construct as follows: [ for each feature structure , [ set and while is not empty [do = set [ if `true `true and then set ] ] [ if then output is an effective algorithm, and [ for each feature structure F, [ a list of the resolvants of F ] ] ] [ Theorem If is rational and computable then for some effective function , [ for each feature structure F, [ [ if F is satisfiable then `true otherwise `false  In fact, Troll represents each feature structure as a disjunction of the resolvants of the feature structure Loosely speaking, the resolvants of a feature structure have the same underlying finite state automaton as the feature structure, and differ only in their output function Troll exploits this property to represent each feature structure as a finite state automaton and a set of output functions A signature provides the symbols from which to construct typed feature structures, and an interpretation gives those symbols meaning