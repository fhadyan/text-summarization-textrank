 In order to make the type hierarchy a BCPO, additional types must be introduced, resulting in a hierarchy like the one in figure  In Carpenter's system, every feature structure has only one unique most general type, so that it is not possible to assign a feature structure two types neither of which subsumes the other unless they have a common subtype In our system, a feature structure can have different types as long as they are chosen from different dimensions Multiple inheritance is the case where some Y type occurs in the right-hand side of more than one type declaration A feature structure can be described by two types from different hierarchies, but there need not be a common subtype of these two types Every feature is introduced for a unique most general type, and is appropriate for all subtypes of that type In case of multiple inheritance, a type can inherit different features from its supertypes in different dimensions A difference arises with type restrictions for feature values In Carpenter's system, the value of a feature has one type as the type restriction, whereas in our system, the type restriction can be a conjunction of types from different dimensions Multi-dimensional type hierarchies have the favourable property that the types can be compiled to a Prolog term representation With this representation, Prolog's built-in term unification is all that is required to compute the conjunction of two types Different dimensions: Each dimension occupies a different argument position in the resulting term representation, so that information from different dimensions can be combined by unification However, a structure can be assigned types from different dimensions, without the need for a subtype that inherits from both dimensions Mutually exclusive types: Mutually exclusive types in the same dimension have different functors at the same argument position, so that their unification fails Feature: The term representation has an argument position for each feature introduced for a type Given this kind of representation, two typed feature structures can be unified simply by unification of the corresponding Prolog terms Section shows that unification in multi-dimensional inheritance hierarchies can be implemented efficiently as unification of a Prolog term representation of the types We treat disjunctive entry conditions by introduction of new types into the hierarchy For each type X at the right-hand side of a disjunctive entry condition, we introduce two new types, X' for the original type, and for its negation These pairs of new types are introduced in different dimensions at the top of the choice system containing the disjunctive entry conditions