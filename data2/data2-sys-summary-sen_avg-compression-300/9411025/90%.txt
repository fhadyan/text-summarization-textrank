 In order to make the type hierarchy a BCPO, additional types must be introduced, resulting in a hierarchy like the one in figure  In our system, a feature structure can have different types as long as they are chosen from different dimensions Multiple inheritance is the case where some Y type occurs in the right-hand side of more than one type declaration A feature structure can be described by two types from different hierarchies, but there need not be a common subtype of these two types In case of multiple inheritance, a type can inherit different features from its supertypes in different dimensions In Carpenter's system, the value of a feature has one type as the type restriction, whereas in our system, the type restriction can be a conjunction of types from different dimensions Multi-dimensional type hierarchies have the favourable property that the types can be compiled to a Prolog term representation Different dimensions: Each dimension occupies a different argument position in the resulting term representation, so that information from different dimensions can be combined by unification Feature: The term representation has an argument position for each feature introduced for a type Section shows that unification in multi-dimensional inheritance hierarchies can be implemented efficiently as unification of a Prolog term representation of the types