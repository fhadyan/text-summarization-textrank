 The resulting DCG, FSA pair for the example PCP is given in figure : The question whether the intersection of a FSA and an off-line parsable DCG is empty is undecidable Suppose the problem was decidable Completeness in this context means: the parse forest grammar contains all possible parses For any threshold it is the case that the intersection problem of off-line parsable DCGs and FSA is decidable Then we compute the intersection of the skeleton with the input FSA This results in a parse forest grammar Finally, we add the corresponding constraints from the DCG to the grammar rules of the parse forest grammar For specificity we will take the grammar to be a Definite Clause Grammar (DCG)  Thus the intersection of a FSA and a CFG is a CFG that exactly derives all parse-trees Such a grammar might be called the parse-forest grammar Parsing uncertain input might be necessary in case of ill-formed textual input, or in case of speech input In fact the (possibly enormously large) parse forest grammar might define an empty language (if the intersection was empty  The predicate side_effect is used to construct the parse forest grammar FSA of course generalizes such word lattices if the intersection is empty we want an empty parse-forest grammar In order to compute the intersection of a DCG and a FSA we assume that FSA are represented as before A fortiori the problem of deciding whether the intersection of a FSA and a DCG is empty or not is undecidable I now show that the question whether the intersection of a FSA and an off-line parsable DCG is empty is undecidable I use Post's Correspondence Problem (PCP) as a well-known undecidable problem As an example, assume that  This FSA generates x 