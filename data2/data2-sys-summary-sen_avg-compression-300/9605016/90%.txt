 Categorial Grammar (CG) and in particular Lambek Categorial Grammar (LCG) have their well-known benefits for the formal treatment of natural language syntax and semantics Let and be a witnessing derivable sequent, i Now, since the counts of this sequent must be balanced, the sequence must contain for each exactly 3 bj and exactly N cj as subformulae This completes the proof This inflexibility of Lambek Calculus is one of the reasons why many researchers study richer systems today The present paper studies the computational complexity of a variant of the Lambek Calculus that lies between LMBK and LP, the Semidirectional Lambek Calculus SDL The semidirectional Lambek calculus (henceforth SDL) is a variant of J Lambek's original calculus of syntactic types We start by defining the Lambek calculus and extend it to obtain SDL Formulae (also called syntactic types are built from a set of propositional variables (or primitive types and the three binary connectives , , called product, left implication, and right implication The (usual) formal framework of these logics is a Gentzen-style sequent calculus Figure shows Lambek's original calculus LMBK In Semidirectional Lambek Calculus we add as additional connective the LP implication llimp, but equip it only with a right rule An SDL-grammar is defined exactly like a Lambek grammar, except that replaces  Whereas Lambek grammars generate exactly the context-free languages (modulo the missing empty word) , the latter generate all permutation closures of context-free languages  grammar to a categorial grammar G  Example We use primitive types and define the lexical map for as follows: The distinguished primitive type is x