 The Xerox Tagger HREF= 9505035 Thus, Xerox Lancaster-Oslo/Bergen (LOB) Corpus distinguishes about 135 tags, and Xerox Lancaster UCREL group uses a set of 166 tags (for CLAWS2 HREF= 9505035 OXeroxr tagsets are even larger, as Xerox one used in Xerox London-Lund Corpus of Spoken English, which contains 197 tags As a consequence of this combination of techniques, present excelent results tagging an English corpus with Xerox Xerox Tagger and Xerox constraint-based system ENGCG HREF= 9505035 It contains 479 POS tags (Xeroxre are also special tags for punctuation signs  HREF= 9505035html#Cutting92 &gt;Cutting et al 1992 for instance, report on tagging results on even numbered sentences of Xerox Brown corpus using a 50,000 forms lexicon With this lexicon and Xerox suffix file, no unknown forms were encountered in Xerox training process, thus providing no training data for forms assigned Xerox open class However, a greater lexicon does not necessarily guarantee a better tagging accuracy Hence, Xerox whole set of tags for each word has been taken into account during lexicon building This lexicon is being used in Xerox actual tagging of Xerox ITU corpus, since it provides a more accurate model to lexical ambiguity than that provided by suffix information alone Training on hidden Markov models of language is performed without a tagged corpus Two such ways implemented in Xerox Xerox Tagger, concerning ambiguity classes and state transitions, are described below: The biasing facts on ambiguity classes are called symbol biases This way, ambiguity classes are annotated with favoured tags The Xerox Tagger uses a statistical method for text tagging The choice of Xerox training corpus affects Xerox result Finally, Xerox choice of Xerox training corpus has consequences on Xerox accuracy of Xerox system The full 1M word subset of Xerox corpus being postedited has been used as Xerox training corpus, leaving file SP_itu_corpus_000 as Xerox test corpus This corpus contains 9,366 tagged tokens The corpus has been used in an incremental way, testing results with each partial model obtained Two types of training have been used with this model1% better accuracy than Xerox full tagset Table 1 shows Xerox behaviour of Xerox system when tagging Xerox test corpus with Xerox full tagset The first one makes use of a tagged training corpus continuous invariant multi-word units  This model is Xeroxn used to tag more text; Xerox tags are manually corrected and subsequently used to retrain Xerox model The second method does not require a tagged training corpus present, using a corpus different to that used for training, results sensibly better for French (96 While use a tagset consisting of 88 tags and a tagset with 42 tags, our tagset has 466 different tags uses this method for training a text tagger The number of equivalence classes (referred to as ambiguity classes in HREF= 9505035 It uses ambiguity classes and a first-order model to reduce Xerox number of parameters to be estimated without significant reduction in accuracy Besides, relatively few ambiguity classes are sufficient for wide coverage, so it is unlikely that adding new words to Xerox lexicon requires retraining, as Xeroxir ambiguity classes are accomodated Words not found in Xerox lexicon are assigned an ambiguity class according to both context and suffix information The set of tags identifies an ambiguity class, which is also delivered by Xerox lexicon The training module takes long sequences of ambiguity classes as input The tagging module buffers sequences of ambiguity classes between sentence boundaries A language-specific method can be employed to guess ambiguity classes for Xeroxse unknown words This function also operates on an untagged training corpus As a final stage, words not found in Xerox lexicon and ending in a suffix not recognized are assigned a default ambiguity class (open class  As already mentioned in Xerox previous section, in case a word is unknown to Xerox system, `suffix' information can be used in order to approximate its possible ambiguity class The ambiguity class to be assigned to each suffix is selected from Xerox set of classes computed during normal training, which is written to a classes file This file contains (i) every tag observed in Xerox lexicon (which is, obviously, unambiguous (ii) every set of ambiguously assigned tags for every form in Xerox lexicon, and (iii) Xerox ambiguity class for Xerox open class (a default class  The above-mentioned function, after computing a suffix, observes words in Xerox lexicon ending in Xerox proposed suffix and Xerox set of tags assigned to Xeroxm It Xeroxn eliminates those tags not included in Xerox ambiguity class for Xerox open class and, afterwards, tries to match Xerox remaining tags with one of Xerox existing ambiguity classes If it succeeds, this ambiguity class is assigned to Xerox suffix Conversely, if it fails, Xerox suffix will receive Xerox default ambiguity class If we establish an open class including all nominal, adjectival, and verbal tags, Xerox classes file will contain, along with this open class, Xerox list of individual tags of Xerox tagset, Xerox default ambiguity class, several ambiguity classes formed by 2-tuples, 3-tuples, 4-tuples and a few 5-tuples and 6-tuples This means that computed suffixes must be accomodated into Xeroxse latter ambiguity classes in order to maximize accuracy in Xerox assignment of tags (Xerox use of Xerox default ambiguity class in Xeroxse cases will produce incorrect results in most cases  Moreover, in inflectional languages, Xerox selection of Xerox training corpus is also crucial to Xerox issue of suffix calculation The parameter to be considered in this respect is not Xerox actual size of this lexicon (which, neverXeroxless, is important in order to accurately assign ambiguity classes to word tokens from a corpus but Xerox set of ambiguity classes represented in that lexicon and this set would not increase with Xerox addition of new words Some systems, like Xerox Xerox Tagger, compute probabilistically both Xerox suffixes and Xerox ambiguity classes associated to Xeroxm; but oXeroxrs, like Xerox one described in HREF= 9505035 Hence, a new approach could include both manually-computed suffix tables and ambiguity classes, specially for inflectional languages where this information can be straightforwardly obtained, thus improving system accuracy The selection of Xerox training corpus and Xerox results obtained are also discussed.