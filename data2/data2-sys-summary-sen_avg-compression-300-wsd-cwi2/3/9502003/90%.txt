 Cyclic terms arise naturally in NLP through unification of non-grow terms, e The Prolog representation of a sort is an instance of the Prolog representation of its supersorts Features are represented by arguments We illustrate these principles for compiling sorted feature terms into Prolog terms with an example from HPSG A program file (a Prolog program) that contains the clauses, with all ProFIT terms compiled into their Prolog term representation graphemic form and logical form) are represented as normal Prolog terms ProFIT provides a user interface which accepts queries containing ProFIT terms, and translates them into Prolog queries, converts the solutions to the Prolog query back into ProFIT terms before printing them out, prints out debugging information as ProFIT termsde, directory: pub/profit  It is very likely that the most efficient commercial Prolog systems, which provide a basis for the implementation of NLP systems, will conform to the proposed ISO standard It has been noted that first-order Prolog terms provide the equivalent expressive power as sorted feature terms  Such compilation of sorted feature terms into Prolog terms has been successfully used in the Core Language Engine (CLE) and in the Advanced Linguistic Engineering Platform (ALEP  A ProFIT program consists of: Declarations for sorts Declarations for features Declarations for templates Declarations for finite domains Definite clauses In addition to unsorted Prolog terms, ProFIT allows sorted feature terms, for which the sorts and features must be declared in advance We provide a general tool that brings together these developments by compiling sorted feature terms into a Prolog term representation, so that techniques from logic programming and logic grammars can be used to provide efficient processing models for sorted feature grammars A feature must be introduced only at one most general sort Appropriateness is also a prerequisite for compilation of feature terms into fixed-arity Prolog terms The following sections describe the ProFIT language which provides sorted feature terms for Prolog, and its implementation On the basis of the declarations, sorted feature terms can be used in definite clauses in addition to and in combination with Prolog terms A Prolog term can have a feature term as its argument, and a feature can have a Prolog term as its value As an example, semantic representations in first-order terms can be used as feature values, but do not need to be encoded as feature terms Sorted feature terms consist of a specification of the sort of the term ( or the specification of a feature value ( or a conjunction of terms (  Sorted feature terms have several advantages over Prolog terms as a representation langauge first First|Rest First.