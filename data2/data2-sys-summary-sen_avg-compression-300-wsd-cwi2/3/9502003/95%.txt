 We illustrate these principles for compiling sorted feature terms into Prolog terms with an example from HPSG A program file (a Prolog program) that contains the clauses, with all ProFIT terms compiled into their Prolog term representationuni-sbde, directory: pub/profit  It is very likely that the most efficient commercial Prolog systems, which provide a basis for the implementation of NLP systems, will conform to the proposed ISO standard It has been noted that first-order Prolog terms provide the equivalent expressive pocompilationr as sorted feature terms  We provide a general tool that brings together these developments by compiling sorted feature terms into a Prolog term representation, so that techniques from logic programming and logic grammars can be used to provide efficient processing models for sorted feature grammars Appropriateness is also a prerequisite for compilation of feature terms into fixed-arity Prolog terms The following sections describe the ProFIT language which provides sorted feature terms for Prolog, and its implementation On the basis of the declarations, sorted feature terms can be used in definite clauses in addition to and in combination with Prolog terms A Prolog term can have a feature term as its argument, and a feature can have a Prolog term as its value Sorted feature terms have several advantages over Prolog terms as a representation langauge.