 These rules will be called expansion rules, since their application will invariably expand the tree structure The first kind of rule corresponds to what is called -rule in Smullyan tableaux; always rules will be called -rules here as well We shall refer to the second kind as -rules, and to the branching rule as -rule - after Smullyan's, even though his branching rules are different Figure summarises the expansion rules to be employed by the system The rules are easily interpreted according to the intuitions assigned above to signs, formulae and information tokens Given the expansion rules, the definition of the main data structure to be manipulated by the theorem proving (parsing) algorithm is straightforward: a derivation tree, , is simply a binary tree built from a set of given formulae by applying the rules For efficiency reasons non-branching rules will be exhaustively applied before we move on to employing -rules In that paper, the theorem prover employed is based on proof nets, and the characterisation of different calculi is taken care of by labelling the formulae The categorial grammar research programme requires the use of a range of logical calculi for linguistic description Dependency Categorial Grammar as well as stronger calculi which extend the power of L through the addition of structural rules The calculus defined above presents no negation, though However, we have seen that the Lambek calculus does not exhibit any of the structural properties of standard logic, and that different calculi may be obtained by varying structural transformations.