 Testing the developed techniques uncovered important constraints on the form of the phrase structure rules in a grammar imposed by the compiler This allows the evaluation of the filler right after the evaluation of the auxiliary verb, but prior to the subject This means that the logical form of the nonverbal complements ( and ) becomes available either upon the evaluation of the complement tagged (in case of argument composition or upon the evaluation of the finite verb (in case the head of the rule is a ditransitive main verb  This causes the rejection of all possible evaluation orders for this rule, as the evaluation of an unrestricted nonverbal complement clearly exceeds the allowed maximal degree of nondeterminacy of the grammar An innovative approach to HPSG processing is described that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and inputs the primed grammar to an advanced Earley processor The approach allows efficient bidirectional processing with similar generation and parsing times We address this topic in describing a novel approach to HPSG based language processing that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing, and hands the primed grammar to an advanced Earley processor (1990  We show that our use of off-line grammar optimization overcomes problems with empty or displaced heads This uncovered some important constraints on the form of the phrase structure rules (phrase structure rules) in a grammar imposed by the compiler (section  Gerdemann's generator follows a head-driven strategy in order to avoid inefficient evaluation orders More specifically, the head of the right-hand side of each grammar rule is distinguished, and distinguished categories are scanned or predicted upon first (1990) show that a top-down evaluation strategy will fail for rules such as VP VP X, irrespective of the order of evaluation of the right-hand side categories in the rule Three optimizations were especially helpful The phrase structure rule that describes this construction is Though a head-driven generator must generate first the head of the rule, nothing prescribes the order of generation of the complements of the head If the generator generates second the main verb then the subcat list of the main verb instantiates the subcat list of the head, and generation becomes a deterministic procedure in which complements are generated in sequence Clearly then, the order of evaluation of the complements in a rule can profoundly influence the efficiency of generation, and an efficient head-driven generator must order the evaluation of the complements in a rule accordingly We chose instead to deal with the ordering problem by using off-line compilation to automatically optimize a grammar such that it can be used for generation, without additional provision for dealing with the evaluation order, by our Earley generator Our off-line grammar optimization is based on a generalization of the dataflow analysis employed in the DIA to a dataflow analysis for typed feature structure grammars Structure sharing determines the dataflow within the rules of the grammar The dataflow analysis is used to determine the relative efficiency of a particular evaluation order of the right-hand side categories in a phrase structure rule by computing the maximal degree of nondeterminacy introduced by the evaluation of each of these categories The maximal degree of nondeterminacy introduced by a right-hand side category equals the maximal number of rules and/or lexical entries with which this category unifies given its binding annotations The optimal evaluation order of the right-hand side categories is found by comparing the maximal degree of nondeterminacy introduced by the evaluation of the individual categories with the degree of nondeterminacy the grammar is allowed to introduce: if the degree of nondeterminacy introduced by the evaluation of one of the right-hand side categories in a rule exceeds the admissible degree of nondeterminacy the ordering at hand is rejected The degree of nondeterminacy the grammar is allowed to introduce is originally set to one and consecutively incremented until the optimal evaluation order for all rules in the grammar is found (Note that subpaths of a path marked as bound are considered bound too The binding annotations of the lexical entries defining the auxiliary verb are used to determine with how many lexical entries the right-hand side category of the rule maximally unifies, ie its maximal degree of nondeterminacy In this case, the maximal degree of nondeterminacy that the evaluation of the auxiliary verb introduces is very low as the logical form of the auxiliary verb is considered fully instantiated To mimic the evaluation of the auxiliary verb, we determine the information common to all defining lexical entries by taking their generalization, ie the most specific feature structure subsuming all, and unify the result with the original right-hand side category in the phrase structure rule Furthermore, Martinovic and Strzalkowski (1992) and others have observed that a simple head-first reordering of the grammar rules may still make insufficient restricting information available for generation unless the form of the grammar is restricted to unary or binary rules By subsequent investigation of the maximal degree of nondeterminacy introduced by the evaluation of the complements in various permutations, we find that the logical form of a sentence only restricts the evaluation of the nonverbal complements after the evaluation of the verbal complement The relative efficiency of this evaluation leads our compiler to as the optimal evaluation order of our phrase structure rule for argument composition The optimal evaluation order for a phrase structure rule need not necessarily be head-first Our dataflow analysis treats heads and complements alike, and includes the head in the calculation of the optimal evaluation order of a rule If the evaluation of the head of a rule introduces much nondeterminacy or provides insufficient restricting information for the evaluation of its complements, our dataflow analysis might not select the head as the first category to be evaluated, and choose instead as the optimal evaluation order This clearly demonstrates an extremely important consequence of using our dataflow analysis to compile a declarative grammar into a grammar optimized for generation Empty or displaced heads pose us no problem, since the optimal evaluation order of the right-hand side of a rule is determined regardless of the head Our Earley generator and the described compiler for off-line grammar optimization have been extensively tested with a large HPSG grammar.