 The Xerox Tagger HREF= 9505035 HREF= 9505035 This lexicon is being used in tagger actual tagging of tagger ITU corpus, since it provides a more accurate model to lexical ambiguity than that provided by suffix information alone Training on hidden Markov models of language is performed without a tagged corpus Two such ways implemented in tagger Xerox Tagger, concerning ambiguity classes and state transitions, are described below: The biasing facts on ambiguity classes are called symbol biases This way, ambiguity classes are annotated with favoured tags The Xerox Tagger uses a statistical method for text tagging The full 1M word subset of tagger corpus being postedited has been used as tagger training corpus, leaving file SP_itu_corpus_000 as tagger test corpus This corpus contains 9,366 tagged tokens The corpus has been used in an incremental way, testing results with each partial model obtained Two types of training have been used with this model1% better accuracy than tagger full tagset The first one makes use of a tagged training corpus This model is taggern used to tag more text; tagger tags are manually corrected and subsequently used to retrain tagger model The second method does not require a tagged training corpus present, using a corpus different to that used for training, results sensibly better for French (96 While use a tagset consisting of 88 tags and a tagset with 42 tags, our tagset has 466 different tags uses this method for training a text tagger The number of equivalence classes (referred to as ambiguity classes in HREF= 9505035 Besides, relatively few ambiguity classes are sufficient for wide coverage, so it is unlikely that adding new words to tagger lexicon requires retraining, as taggerir ambiguity classes are accomodated Words not found in tagger lexicon are assigned an ambiguity class according to both context and suffix information The set of tags identifies an ambiguity class, which is also delivered by tagger lexicon The training module takes long sequences of ambiguity classes as input The tagging module buffers sequences of ambiguity classes between sentence boundaries This function also operates on an untagged training corpus As a final stage, words not found in tagger lexicon and ending in a suffix not recognized are assigned a default ambiguity class (open class  The ambiguity class to be assigned to each suffix is selected from tagger set of classes computed during normal training, which is written to a classes file The above-mentioned function, after computing a suffix, observes words in tagger lexicon ending in tagger proposed suffix and tagger set of tags assigned to taggerm It taggern eliminates those tags not included in tagger ambiguity class for tagger open class and, afterwards, tries to match tagger remaining tags with one of tagger existing ambiguity classes If it succeeds, this ambiguity class is assigned to tagger suffix Conversely, if it fails, tagger suffix will receive tagger default ambiguity class Hence, a new approach could include both manually-computed suffix tables and ambiguity classes, specially for inflectional languages where this information can be straightforwardly obtained, thus improving system accuracy The selection of tagger training corpus and tagger results obtained are also discussed.