 By itself, however, good syntactic processing may not provide much `competitive advantage' to an NLG system Two other advantages of NLG that may be important in some cases are multilingual output and guaranteed conformance to standards An NLG system could, for example, take sentence-length constraints into account when making aggregation decisions I do not know of any current applied NLG system for which standards conformance is an issue, but this may become important in future applications Templates, of course, also have advantages over NLG Since knowledge-based application systems are still rare, and even the ones that do exist often do not have all the information that an NLG system would need, it may be the case that NLG is not the most appropriate technology for many current text-generation applications There are very few people who can build NLG systems, compared to the millions of programmers who can build template systems; there is also very little awareness of what NLG can (and cannot) do among most developers of application systems Finally, the fact that NLG is an experimental technology means that conservative developers may want to avoid using it It is of course possible to build ATG systems that use both NLG and template techniques Systems that use NLG techniques for `high-level' operations such as content planning, but templates for low-level realization (eg,  The basic goal of such systems is to use NLG where it really `adds value and to use simpler approaches where NLG is not needed or would be too expensive Another way of saying this is that NLG shouldn't `get in the way  Developers will use NLG modules and techniques if NLG helps them produce the kind of texts they want to produce; if an NLG system is seen not as a helpful tool but as something that needs to be worked around, it will not be used NLG should also only be used when it clearly increases maintainability, text readability, or some other important attribute of the target application system I believe, syntactical the way, that most current hybrid systems use `real NLG' in content-determination and perhaps sentence-planning, and use template techniques mainly in syntactic realization This may simply be a coincidence, but it may also suggest that much of the real `value-added' of many NLG systems may be in the high-level processing, not in ensuring correct syntax Multilinguality: Multilingual output is another feature that could be a strong selling point for NLG in many circumstances (Section  But although many multilingual NLG systems have been built, surprisingly little research has been done on the principles underlying multilinguality Hybrid Systems: It seems safe to predict that many fielded NLG systems, at least in the near term, will use a hybrid approach, ie, they will use both template and NLG technology Anything that makes it easier to build knowledge bases will probably make it easier to build NLG systems As NLG technology begins to move out of the lab and into real applications, the NLG community needs to begin thinking not just about how to generally improve our understanding of this research area, but also about questions such as (a) what advantages NLG offers over simpler approaches; (b) under what circumstances using NLG `adds value' to real-world systems; and (c) where further advances in NLG could really increase the usefulness of applied NLG systems This is an example of conditional text he does  Performance Now performs the most sophisticated sentence-planning of any `template' system that I am aware of; indeed, one might argue that Performance Now is doing enough linguistic processing that it really should be regarded as a (simple) NLG system Determining under what conditions and in what aspects NLG techniques are `better' than character-string manipulation is of utmost importance to the applied NLG community, and should also be of interest to the research community; if nothing else, research funding for NLG is likely to increase if there are a large number of successful fielded systems that use NLG technology Many advantages of NLG over templates have been described in the literature In this section, I try to summarize these arguments, paying special attention to those arguments that seem important to the success of current applied NLG systems One reason for using NLG is maintainability; template-based generators can be difficult to modify according to changing user needs With a template system, in contrast, making this change may require rewriting a large number of template fragments We as yet have little data on how easy/difficult it really is to maintain fielded NLG systems; is the only paper I am aware of that discusses the maintenance of fielded NLG systems It is useful when discussing output quality to distinguish between aspects of quality that arise from the three different processing stages used in most applied NLG systems : content/text planning, sentence planning, and syntactic realization The topic of this paper is thus when is NLG `appropriate technology' for building ATG systems, and when should simpler approaches be used Most applied NLG systems have a sentence planning module that handles aggregation, referring-expression generation, sentence formation, and lexicalization  It is straightforward, in contrast, for an NLG system to handle such phenomena Interestingly enough, however, I am not aware of any applied NLG system whose success is primarily based on better syntactic (or morphological) processing.