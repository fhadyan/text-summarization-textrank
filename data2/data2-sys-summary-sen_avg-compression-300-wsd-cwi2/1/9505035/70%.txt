 The Xerox Tagger HREF= 9505035 Thus, Xerox Lancaster-Oslo/Bergen (LOB) Corpus distinguishes about 135 tags, and Xerox Lancaster UCREL group uses a set of 166 tags (for CLAWS2 HREF= 9505035 OXeroxr tagsets are even larger, as Xerox one used in Xerox London-Lund Corpus of Spoken English, which contains 197 tags As a consequence of this combination of techniques, present excelent results tagging an English corpus with Xerox Xerox Tagger and Xerox constraint-based system ENGCG HREF= 9505035 It contains 479 POS tags (Xeroxre are also special tags for punctuation signs  Given Xerox rich verbal morphology of Spanish, verbal tags account for 59% of Xerox total number of tags HREF= 9505035html#Cutting92 &gt;Cutting et al 1992 for instance, report on tagging results on even numbered sentences of Xerox Brown corpus using a 50,000 forms lexicon With this lexicon and Xerox suffix file, no unknown forms were encountered in Xerox training process, thus providing no training data for forms assigned Xerox open class However, a greater lexicon does not necessarily guarantee a better tagging accuracy Some authors use an optimal dictionary that indicates, for each word, all Xerox tags assigned to it somewhere in Xerox corpus being used, but not oXeroxr, possible tags  Since our starting point is not a tagged corpus in which to perform Xerox testing of a given stochastic model, our lexicon is not specially biased towards Xerox corpus we aim at tagging Hence, Xerox whole set of tags for each word has been taken into account during lexicon building The lexicon used by Xerox system has been produced by compiling different sources of information, although some coding work has also been performed This lexicon is being used in Xerox actual tagging of Xerox ITU corpus, since it provides a more accurate model to lexical ambiguity than that provided by suffix information alone Training on hidden Markov models of language is performed without a tagged corpus Two such ways implemented in Xerox Xerox Tagger, concerning ambiguity classes and state transitions, are described below: The biasing facts on ambiguity classes are called symbol biases This way, ambiguity classes are annotated with favoured tags The Xerox Tagger uses a statistical method for text tagging Using different values for Xerox number of iterations (Xerox number of times Xerox same block is used in training) and Xerox size of Xerox block of text used for training The choice of Xerox training corpus affects Xerox result Finally, Xerox choice of Xerox training corpus has consequences on Xerox accuracy of Xerox system As demonstrated by , when using an HMM, a greater training corpus does not necessarily guarantee a better accuracy On Xerox contrary, an initial model estimated by performing Relative Frequency (RF) training on a tagged text may degrade if a relatively great untagged corpus is used next Although Xerox decision of tagging Xerox ITU corpus using Xerox full version of Xerox tagset was already adopted and postediting on Xerox corpus so tagged has begun, a parallel development of Xerox tagger with Xerox reduced tagset has been performed The full 1M word subset of Xerox corpus being postedited has been used as Xerox training corpus, leaving file SP_itu_corpus_000 as Xerox test corpus This corpus contains 9,366 tagged tokens The corpus has been used in an incremental way, testing results with each partial model obtained Two types of training have been used with this model1% better accuracy than Xerox full tagset Table 1 shows Xerox behaviour of Xerox system when tagging Xerox test corpus with Xerox full tagset The first one makes use of a tagged training corpus Results, however, are better with a previously trained model A small amount of text is manually tagged and used to train a partially accurate model This model is Xeroxn used to tag more text; Xerox tags are manually corrected and subsequently used to retrain Xerox model This paper presents results obtained with Xerox port to Spanish of a public domain tagger Xerox Xerox Tagger The second method does not require a tagged training corpus present, using a corpus different to that used for training, results sensibly better for French (96 While use a tagset consisting of 88 tags and a tagset with 42 tags, our tagset has 466 different tags These tagset size may be excesive, specially for a probabilistic tagger, but results obtained with our corpus show similar accuracy, with Xerox value-added benefit for Xerox tagged corpus of having Xerox whole variety of morphosyntactic categories and subcategories reflected in it uses this method for training a text tagger uses word equivalence classes based on parts of speech, to pool data from individual words The number of equivalence classes (referred to as ambiguity classes in HREF= 9505035 The Xerox Tagger is based on an HMM It uses ambiguity classes and a first-order model to reduce Xerox number of parameters to be estimated without significant reduction in accuracy Besides, relatively few ambiguity classes are sufficient for wide coverage, so it is unlikely that adding new words to Xerox lexicon requires retraining, as Xeroxir ambiguity classes are accomodated Words not found in Xerox lexicon are assigned an ambiguity class according to both context and suffix information The set of tags identifies an ambiguity class, which is also delivered by Xerox lexicon The training module takes long sequences of ambiguity classes as input The tagging module buffers sequences of ambiguity classes between sentence boundaries Words not found in Xerox manually-constructed lexicon are generally both open class and regularly inflected according to HREF= 9505035 A language-specific method can be employed to guess ambiguity classes for Xeroxse unknown words This function also operates on an untagged training corpus As a final stage, words not found in Xerox lexicon and ending in a suffix not recognized are assigned a default ambiguity class (open class  As already mentioned in Xerox previous section, in case a word is unknown to Xerox system, `suffix' information can be used in order to approximate its possible ambiguity class The above-mentioned function operates on a training text and calculates two parameters: Xerox suffixes Xeroxmselves Xerox ambiguity class assigned to each suffix In Xerox suffix calculation, Xerox unique parameter that can be controlled is Xeroxir maximum lenght The ambiguity class to be assigned to each suffix is selected from Xerox set of classes computed during normal training, which is written to a classes file This file contains (i) every tag observed in Xerox lexicon (which is, obviously, unambiguous (ii) every set of ambiguously assigned tags for every form in Xerox lexicon, and (iii) Xerox ambiguity class for Xerox open class (a default class  The above-mentioned function, after computing a suffix, observes words in Xerox lexicon ending in Xerox proposed suffix and Xerox set of tags assigned to Xeroxm It Xeroxn eliminates those tags not included in Xerox ambiguity class for Xerox open class and, afterwards, tries to match Xerox remaining tags with one of Xerox existing ambiguity classes If it succeeds, this ambiguity class is assigned to Xerox suffix Conversely, if it fails, Xerox suffix will receive Xerox default ambiguity class If we establish an open class including all nominal, adjectival, and verbal tags, Xerox classes file will contain, along with this open class, Xerox list of individual tags of Xerox tagset, Xerox default ambiguity class, several ambiguity classes formed by 2-tuples, 3-tuples, 4-tuples and a few 5-tuples and 6-tuples This means that computed suffixes must be accomodated into Xeroxse latter ambiguity classes in order to maximize accuracy in Xerox assignment of tags (Xerox use of Xerox default ambiguity class in Xeroxse cases will produce incorrect results in most cases  Assuming that a is one of Xerox suffixes computed by Xerox above-mentioned function, Xerox problem Xeroxn is trying to match Xerox set of tags observed in Xerox lexicon for words ending in a included in Xerox intersection with Xerox default ambiguity class with one of Xerox previously computed classes The former ambiguity class does simply not exist Xeroxre must exist at least one ambiguous form (ending in a or in anoXeroxr suffix) validating an ambiguity class in order for it to be selected when observed in words ending in a Moreover, in inflectional languages, Xerox selection of Xerox training corpus is also crucial to Xerox issue of suffix calculation However, this prerequisite alone does not guarantee a proper computation of suffixes, since Xerox function operates not only on word tokens from Xerox training corpus but also on Xerox system's lexicon The parameter to be considered in this respect is not Xerox actual size of this lexicon (which, neverXeroxless, is important in order to accurately assign ambiguity classes to word tokens from a corpus but Xerox set of ambiguity classes represented in that lexicon and this set would not increase with Xerox addition of new words Some systems, like Xerox Xerox Tagger, compute probabilistically both Xerox suffixes and Xerox ambiguity classes associated to Xeroxm; but oXeroxrs, like Xerox one described in HREF= 9505035html#Weischedel93 &gt;Weischedel et al 1993 include a hybrid approach where suffixes are manually added and ambiguity classes are approximated directly from training data Hence, a new approach could include both manually-computed suffix tables and ambiguity classes, specially for inflectional languages where this information can be straightforwardly obtained, thus improving system accuracy The selection of Xerox training corpus and Xerox results obtained are also discussed.