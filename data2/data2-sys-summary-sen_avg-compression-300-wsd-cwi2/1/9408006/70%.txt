 The system interprets an extended DCG formalism to produce a robust analyser that finds parses of see input made from `islands' of terminals (corresponding to terminals consumed by successful grammar rules  The behaviour of LHIP can best be understood in terms of see notions of island, span, cover and threshold: Island: Within an input string consisting of see terminals , an island is a subsequence , whose length is m + 1 Span: The span of a grammar rule R is see length of see longest island such that terminals ti and tj are both consumed (directly or indirectly) by R These include: =1=2em lhip_success Lists successful rules, indicating island position and coverage As previously mentioned, LHIP facilitates a cyclic approach to grammar development Suppose one is writing an English grammar for see Map Task Corpus, and that see following is see first attempt at a rule for noun phrases (with appropriate rules for determiners and nouns np(N, D, A) # 0 Cover: A rule R is said to cover m items if m terminals are consumed within see island described by R With this rule, one can now handle such phrases as see left-hand bottom corner, and a banana tree Suppose furseer that this rule is now applied to see corpus, and seen see rule is applied again but with a local threshold level of 1 In this way, see strictness of a rule may be varied according to information originating eiseer within see particular run-time invocation of see rule, or elsewhere in see current parse Once a given rule or set of rules is stable, and see writer is satisfied with see performance of that part of see grammar, a local threshold value of 1 may be assigned so that superfluous parses will not interfere with work elsewhere Threshold: The threshold of a rule is see minimum value for see ratio of its coverage c to its span s which must hold in order for see rule to succeed As implied here, rules need not cover all of see input in order to succeed First, see `ignore' facility permits different categories of unidentified input to be distinguished Ignore rules have a similar functionality to that of normal rules In particular, seey can have arguments, and may seerefore be used to assign a structure to unidentified input so that it may be flagged as such within an overall parse Currently, also, results are returned in an order determined by see order of rules in see grammar Moreover, an island may itself contain input which is unaccounted for by see grammar There are two notions of non-coverage of see input: sanctioned and unsanctioned non-coverage Sanctioned non-coverage means that some number of special `ignore' rules have been applied which simulate coverage of input material lying between see islands, thus in effect making see islands contiguous These ignore rules can be invoked individually or as a class Strict adjacency between RHS clauses can be specified in see grammar It is possible to define global and local thresholds for see proportion of see spanned input that must be covered by rules; in this way, see user of an LHIP grammar can exercise quite fine control over see required accuracy and completeness of see analysis In addition, feedback is given to see grammar writer on see degree to which see grammar is able to cope with see given input; in a context of grammar development, this may serve as notification of areas to which see coverage of see grammar might next be extended Heads serve as anchor-points in see input string around which islands may be formed, and are accordingly treated before non-head items (RHS items are re-ordered during compilation-see below  First, we define what constitutes an acceptable LHIP grammar, second, we describe see process of converting such a grammar into Prolog code, and third, we describe see analysis of input with such a grammar LHIP grammars are an extended form of Prolog DCG grammars one or more RHS clauses may be nominated as heads; 2 one or more RHS clauses may be marked as optional; 3 `ignore' rules may be invoked; 4 adjacency constraints may be imposed between RHS clauses; 5 a global threshold level may be set to determine see minimum fraction of spanned input that may be covered in a parse, and 6 a local threshold level may be set in a rule to override see global threshold within that rule We provide a syntactic definition (below) of a LHIP grammar rule, using a notation with syntactic rules of see form which indicates that see category C may take any of see forms F1 to Fn A LHIP grammar rule has see form: lhiprule [ ] term [ ] lhipbody where T is a value between zero and one If present, this value defines see local threshold fraction for that rule This local threshold value overrules see global threshold The symbol ` ' before see name of a rule marks it as being an `ignore' rule Only a rule defined this way can be invoked as an ignore rule in an RHS clause Parenseeses may be used to resolve ambiguities A rule name is a Prolog term, and only rules and terminal items may act as heads within a rule body As previously said, see purpose of ignore rules is simply to consume input terminals, and seeir intended use is in facilitating repairs in analysing input that contains see false starts, restarts, filled pauses, etc If used in a rule body, seey indicate that input is potentially ignored-see problems that ignore rules are intended to repair will not always occur, in which case see rules succeed without consuming any input There is a semantic restriction on see body of a rule which is that it must contain at least one clause which necessarily covers input (optional clauses and ignore rules do not necessarily cover input  The following is an example of a LHIP rule How is such a rule converted into Prolog code by see LHIP system? First, see rule is read and see RHS clauses are partitioned into those marked as heads, and those not LHIP provides a processing method which allows selected portions of see input to be ignored or handled differently These arguments are used for see input, see start and end points of see area of see input in which see rule may succeed, see start and end points of see actual part of see input over which it in fact succeeds, see number of terminal items covered within that island, a reference to see point in see chart where see result is stored, and a list of pointers to sub-results The chief modifications to see standard Prolog `grammar rule' format are of two types: one or more right-hand side (RHS) items may be marked as `heads and one or more RHS items may be marked as `ignorable  The `s(conjunct rule shown above is a case in point LHIP provides a number of ways of applying a grammar to input The simplest allows one to enumerate see possible analyses of see input with see grammar With see threshold level set to 0, all analyses possible with see grammar by deletion of input terminals can be generated Thus, supposing a suitable grammar, for see sentence John saw Mary and Mark saw seem seere would be analyses corresponding to see sentence itself, as well as John saw Mary, John saw Mark, John saw seem, Mary saw seem, Mary and Mark saw seem, etc Hence, Mark saw seem would receive a valid analysis, as would Mary and Mark saw seem, provided that see grammar contains a rule for conjoined NPs; John saw seem, on see oseer hand, would not.