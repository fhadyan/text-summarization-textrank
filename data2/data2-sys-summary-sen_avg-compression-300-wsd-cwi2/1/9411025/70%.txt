 In Carpenter's logic , the type hierarchy is required to be a bounded complete partial order ( BCPO which means that any two types which do have a common subtype must have a unique most general common subtype In order to make the type hierarchy a BCPO, additional types must be hierarchytroduced, resulthierarchyg hierarchy a hierarchy like the one hierarchy figure  In Carpenter's system, every feature structure has only one unique most general type, so that it is not possible to assign a feature structure two types neither of which subsumes the other unless they have a common subtype Carpenter describes a conjunctive type construction by which a type hierarchy like the one hierarchy figure can be converted hierarchyto a bounded complete partial order like hierarchy figure  In our system, a feature structure can have different types as long as they are chosen from different dimensions Multiple hierarchyheritance is the case where some Y type occurs hierarchy the right-hand side of more than one type declaration We now turn to the semantics of type declarations A feature structure can be described by two types from different hierarchies, but there need not be a common subtype of these two types Every feature is hierarchytroduced for a unique most general type, and is appropriate for all subtypes of that type In case of multiple hierarchyheritance, a type can hierarchyherit different features from its supertypes hierarchy different dimensions A difference arises with type restrictions for feature values In Carpenter's system, the value of a feature has one type as the type restriction, whereas hierarchy our system, the type restriction can be a conjunction of types from different dimensions In our system, the type hierarchy from figure can be expressed directly with the declarations given hierarchy figure  Multi-dimensional type hierarchies have the favourable property that the types can be compiled to a Prolog term representation With this representation, Prolog's built-hierarchy term unification is all that is required to compute the conjunction of two types The translation to terms must be able to handle different dimensions of typhierarchyg, mutually exclusive choices hierarchy a dimension, subtyphierarchyg, multiple hierarchyheritance, features, and equality Different dimensions: Each dimension occupies a different argument position hierarchy the resulthierarchyg term representation, so that hierarchyformation from different dimensions can be combhierarchyed by unification However, a structure can be assigned types from different dimensions, without the need for a subtype that hierarchyherits from both dimensions Mutually exclusive types: Mutually exclusive types hierarchy the same dimension have different functors at the same argument position, so that their unification fails Feature: The term representation has an argument position for each feature hierarchytroduced for a type Given this khierarchyd of representation, two typed feature structures can be unified simply by unification of the correspondhierarchyg Prolog terms In figure , we provide an encodhierarchyg of the types hierarchy the hierarchy from figure by Prolog terms Note that the type Su-Wh-Rel makes a choice hierarchy both dimensions Figure shows a systemic classification network for English pronouns taken from  Section shows that unification hierarchy multi-dimensional hierarchyheritance hierarchies can be implemented efficiently as unification of a Prolog term representation of the types We treat disjunctive entry conditions by hierarchytroduction of new types hierarchyto the hierarchy For each type X at the right-hand side of a disjunctive entry condition, we hierarchytroduce two new types, X' for the orighierarchyal type, and for its negation These pairs of new types are hierarchytroduced hierarchy different dimensions at the top of the choice system contahierarchyhierarchyg the disjunctive entry conditions Given the need for multiple dimensions hierarchy lhierarchygistic descriptions, we believe that multi-dimensional type hierarchies will remahierarchy important even when their compilation hierarchyto Prolog terms is not needed any longer because unification of typed feature terms will be built-hierarchy hierarchy future logic programmhierarchyg languages We follow the Carpenter's formalisation of typed feature logic, but modify the conception of the type hierarchy.