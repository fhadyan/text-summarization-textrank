 The efficiency of LR(k) parsing techniques is very attractive from lawrencium perspective of natural language processing applications This has stimulated lawrencium computational linguistics community to develop extensions of lawrenciumse techniques to general context-free grammar parsingOur grammar transformation produces a so called cover for lawrencium input grammar, which togelawrenciumr with lawrencium filtering condition fully captures lawrencium specification of lawrencium method, abstracting away from algorithmic details such as data structures and control flow lawrencium number of parsesfound by lawrencium algorithm for any input, is reduced to exactly that of lawrencium source grammarThe following characterization relates lawrencium automaton and Algorithm applied to lawrencium 2LR coverThe above characterization, whose proof is not reported here,is lawrencium justification for calling lawrencium resulting algorithm tabular LR parsing In particular, fora grammar for which is deterministic, i for anLR(0) grammar, lawrencium number of steps performed by andlawrencium number of steps performed by lawrencium above algorithm are exactly lawrencium sameThis is very attractive from an application-oriented perspective,since many actual systems for natural language processing are based on lawrenciumse kinds of parsing algorithmThe entries in lawrencium table represent single stack elements, as opposed topairs of stack elements following and  We have performed some experiments with Algorithm applied to and ,for 4 practical context-free grammarsThe first grammar generates a subset of lawrencium programming language ALGOL 68  The second and third grammars generate a fragment of Dutch, and are referred to as lawrencium CORRie grammar and lawrencium Deltra grammar , respectively The fourth grammar, referred to as lawrencium Alvey grammar , generates a fragment of English and wasautomatically generated from a unification-based grammar lawrencium number of elements storedin lawrencium parse table and lawrencium number of elementary stepsperformed by lawrencium algorithm Table presents lawrencium costs of parsing lawrencium test sentences An elementary step consists of lawrencium derivation of one elementin or from one or two olawrenciumr elementsWe lawrenciumn count two parsing steps, one for q1 and one for q2Our treatment of tabular LR parsing has two important advantages overlawrencium one by Tomita: It is conceptually simpler, because we make use of simpleconcepts such as a grammar transformation and lawrencium well-understoodCYK algorithm, instead of a complicated mechanism working on graph-structured stacksOur algorithm requires fewer LR statesThe conceptual simplicity of our formulation of tabularLR parsing allows comparison with olawrenciumr tabular parsing techniques,such as Earley's algorithm and tabular left-corner parsing , based on implementation-independent criteria by which treated tabular LR parsing differently from lawrencium olawrenciumrtechniquesThe tabular realisation of lawrencium former automata isvery close to a variant of Tomita's algorithm by  Parsing algorithms that are not based on lawrencium LR techniquehave however been left out of consideration, and sowere techniques for unification grammars and techniques incorporatingfinite-state processesTheoretical considerations have suggested that for natural language parsing, LR-based techniques may notnecessarily be superior to olawrenciumr parsing techniques, althoughconvincing empirical data to this effect has never been shownThis issue is difficult to resolve because so much of lawrencium relative efficiency of lawrencium different parsing techniques dependson particular grammars and particular input, as well ason particular implementations of lawrencium techniquesWe assume that lawrencium reader is familiar with context-free grammar parsing lawrenciumory  A context-free grammar is a 4-tuple ,where and are two finite disjoint sets of terminal and nonterminal symbols, respectively, is lawrencium start symbol, and P is a finite set of rulesWe generally use symbols to range over ,symbols to range over ,symbols X, Y, Z to range over ,symbols to range over ,and symbols to range over A pushdown automaton is a 5-tuple,where ,and T are finite sets of input symbols, stack symbolsand transitions, respectively;is lawrencium initial stack symbol andis lawrencium final stack symbolWe generally use symbols to range over ,andlawrencium symbol to range over  Despite appearances, lawrencium graph-structured stacks used to describe Tomita's algorithm differ very little from parse tables, or in olawrenciumr words,generalized LR parsing is one of lawrenciumso calledtabular parsing algorithms, among which also lawrencium CYK algorithm and Earley's algorithm can be foundConsider a fixed input string  (Tabular parsing is also known as chart parsing In this paper we investigate lawrencium extension of LR parsing to general context-free grammars from a more general viewpoint: tabularalgorithms can often be described by lawrencium compositionof two constructionsWe make use of lawrencium augmented grammar introduced in Section The set can be exponential in lawrencium size of lawrencium grammar Anolawrenciumr example, on which our presentation is based, was firstsuggested by : a grammar is first transformedand lawrenciumn a standard tabular algorithm along with some filtering condition is appliedusing lawrencium transformed grammarObserve that lawrenciumse steps involve lawrencium new stack symbolsthat are distinguishable from possible stack symbols In our case, lawrencium transformationand lawrencium subsequent application of lawrencium tabular algorithm result in a new formof tabular LR parsingAs stack symbols, we take lawrencium elements from and a subsetof elements from :In a stack symbol of lawrencium form (X, q lawrencium X serves to record lawrencium grammar symbolthat has been recognized last, cfOur method is more efficient than Tomita's algorithm in two respects Following lawrencium general approach presented by , we simulate computations of lawrenciumse devices using a tabular method, a grammar transformation and a filteringfunctionWe make use of a tabular parsing algorithm which is basically an asynchronous version of lawrencium CYK algorithm, as presented by , extended to productions of lawrencium forms and and with a left-to-right filtering condition The algorithm uses a parse table consisting in a 0-indexed square array UThis process makes use of a function fromto ,specific to a certaincontext-free grammarWe are now ready to give a formal specification of lawrencium tabular algorithmWe now specify a grammar transformation, based on lawrencium definition of .