 Being these rules compiled into the hierarchy, a context-free rule as , has to be interpreted as such that  Now, is an expression that belongs to the informational domain associated to a generic rule  The reduce rule that takes account of the interaction of a generic rule with a context-free grammar is The interaction with the generic rule is expressed in the term  The left part, , performs dynamic binding, returning the effective rule that will be applied on  The side conditions on this rule are: one, that exists an applicable syntactic rule  Note that it could be the case that there is an appropriate syntactic rule, but the additional restrictions imposed by the generic rule do not hold  It is interesting to remark that the dynamic binding process depends on the particular objects in the Reduce rule, not only on the conditions of the context-free rule That makes impossible to pre-attach an effective partial rule to each context-free rule at compilation time, such that the binding process could be performed off-line Though this behaviour introduces and additional complexity factor in generic rule parsing, it allows the specification of semantic and syntactic processes as independent mechanisms that interact modularly A particular case of generic rule is that in which the combination functions simply return a type, as in our first example In such a rule, the role of every partial rule is similar to that of a context-free rule, and the generic rule works as a context-free grammar in which rules has a default interpretation Such parsing does not differ substantially from context-free parsing The reduce rule that takes account of syntactic parsing with a generic rule can be described as follows: The expression , with both arguments repeated, may seem confusing The first couple are the arguments of the dynamic binding function, from which an effective partial rule is obtained Such partial rule is then applied to the second set of arguments They are related to the informational domain associated to the generic rule, which is, in this case, the type information associated to the linguistic objects The computational cost of parsing processes associated to this kind of generic rules carrying on syntactic information is obviously the same as the cost of parsing a context-free grammar In context-free parsing, this step involves looking up the available rules and matching the objects involved with the right-hand side of the rules For a generic rule, the reduce rule involves introducing a new type in the hierarchy of rules Again, this implies a factor G in the overall complexity, compile G the number of partial rules associated to the generic rule The dependence with the length of the string is obviously the same, as the surface behaviour of a context-free grammar and a generic rule is exactly the same for bottom-up parsing Another interesting case is when we have a generic rule to specify syntactic restrictions, and another one to perform semantic interpretation Consider the grammar made up of the following generic rules: The syntactic rule has already been considered in section  (Reduce) In the only application of the reduce rule, the following terms were used: = This example illustrates the point, stated before, that it is not possible to attach a semantic rule to each syntactic rule at compile time A phrase-structure grammar with a one-to-one correspondence between syntactic and semantic rules would need 12 pairs of rules to get the same behaviour as the two generic rules above The incrementality and modularity of the generic rule approach is evident in this case In this paper we propose a metagrammatical formalism, generic rules, to give a different degree of specificity to each grammatical rule The combinatory rules of type raising and functional composition , for instance, introduce associativity in the structural resources of the grammar Its reformulation as a generic rule will show the advantages of expressing default and exceptional grammar rules We present an approach to parse non-constituent coordination within categorial grammars that can be parsed in polynomial time when reformulated as a generic rule The framework of generic rules offers a natural way to express the grammar to deal with non-constituent coordination as an arrangement of default rules, where each combination of types is performed according to the most specific rule available The formalism of generic rules allows for a direct specification of such set of - still very informal - rules Once turned into a generic rule, they can be parsed with any bottom-up context-free recognition algorithm (reformulated as the shift-reduce parsing in section  The first step is to express the operations related to the grammar as binary rules: and are the usual forward and backward application rules is the rule to introduce a sequence product When the parsing process calls the grammar to combine linguistic objects, the dynamic binding process inspects the applicable grammatical resources, considers their different priority and returns an effective rule, or set of rules, to be applied on such linguistic objects rule implements the stepped application of rules L/ and in the cancellation of type  is the rule to eliminate the tuple operator and it implements the rule The crucial point to write a generic rule based upon the rules above is to determine the types of the arguments associated to each operation Therefore, the first partial rule would be licensed on arguments of the most general type  The second partial rule is the rule of tuple formation We need two partial rules to establish both type specifications Given that hierarchy, we propose the following generic rule to parse sentences including non-constituent coordination: Note, again, that no precedence has to be defined by the grammar writer to control the interaction of the rules The Hasse diagram of the cartesian poset associated to that generic rule is: ac ad This rule can be parsed with the algorithm in  A set of such functions will be called a generic rule That partial rule is signalled by the dynamic binding function as the most specific to combine the types involved in the combination process Our account of non-constituent coordination illustrates the advantages of such default arrangements for grammar rules When reformulated as a generic rule, the type conditions on the arguments for each rule are used by the dynamic binding process to fire the most appropriate grammar rule at every parsing step Next, we make a more formal presentation of generic rules We present, then, a reformulation of that grammar as a generic rule Consider a context-free grammar - possibly augmented with functional restrictions attached to each rule - that includes the hierarchy and the rule  The introduction of an exception forces the revision of previously described lexical types and grammar rules When combining two constituents, a metagrammatical mechanism establishes a partial order for the candidate rules and selects the most appropriate rule (or set of rules) to be applied The generic rule having the desired behaviour for rule and rule has this aspect: Equation describes a generic rule, , that returns a type for the composition of two linguistic objects is a partial rule applicable when the arguments belong to the types , in that order As exceptional rules involve a higher computational cost, parsing processes associated to such formalisms become computationally intractable The applicable partial rules will be  Also, only minor changes have to be made to a CFG parsing algorithm in order to work with generic rules A generic rule over the tuple is another tuple , where: is a set of functions, that will be called partial rules, of the form: where , and the following condition holds on the set of partial rules:  We call cartesian type of a partial rule to the type specification  It interfaces parsing processes with the grammar, selecting the most specific partial rule in given two arguments of types  The function provides the interface of the generic rule, as a system of object-oriented functions, with the parsing process that calls it In particular, the dynamic binding function provides the default interpretation for partial rules The action of the generic rule over a couple of linguistic objects with types and associated expressions is given by  For instance, if the partial rules were unification constraints, some default version of unification could be performed on the applicable rules, taking their relative precedence into account When the cartesian type that represents the arguments of a call to the generic rule has more than one direct supertype, there is not a single most specific rule (see the example in Figure  A generic rule may interact with a phrase-structure grammar to perform the composition of some informational field In , for instance, we propose generic rules as a well-suited mechanism to perform categorial semantic interpretation as a modular process that interacts with a phrase-structure grammar On the other hand, a grammar could be made up exclusively of generic rules, adequately combined to perform parsing We will gradually adopt this algorithm to capture generic rule parsing Let stand for  The reduce rule carries on semantic composition: where f is the semantic composition function associated to the rule  We can augment the shift-reduce parser in a similar way to represent the interaction between a generic rule and a phrase-structure grammar We have to take account of two differences between generic rule parsing and the syntactic-semantic parser above: 1 The action of the generic rule has to be specified through the dynamic binding function There is not a partial rule associated to each context-free rule.