 Earley grammar is based on grammars encoded as definite clauses For unit clauses, the priority is identified with the preference value The following is the algorithm for bottom-up best-first Earley grammar The instantiation (prediction) rule of top-down Earley grammar is not needed in bottom-up Earley grammar, because there is no prediction The addition of non-unit clauses should be made dependent on the goal and the base cases in order to go from a purely bottom-up algorithm to a directed algorithm that combines the advantages of top-down and bottom-up processing The set of selected clauses is called the chart The scanning step selects clauses that can appear as leaves in the proof tree for a given goal G If this is the case, then all the words contained in the PHON value of the goal can have their lexical items selected as unit clauses to start bottom-up processing Note that the base case clauses can become further instantiated in this step In bottom-up Earley grammar, the first step towards proving a goal is perform lookup for the goal, and to add all the resulting (unit) clauses to the chart For these grammars data-driven bottom-up processing is more appropriate Whenever a unit clause is combined with a non-unit clause all goals up to the first waiting goal of the resulting clause are proved according to their goal type, and then a new clause is added whose selected goal is the first waiting goal In the following inference rule for clauses with mixed goal types, is a (possibly empty) sequence of goals without any waiting goals, and is a (possibly empty) sequence of goals starting with a waiting goal In order to avoid incompleteness, the scanning step must add all program clauses that are needed for a proof of the goal to the chart, and the combination of indices may only fail for inference steps which are useless for a proof of the goal.