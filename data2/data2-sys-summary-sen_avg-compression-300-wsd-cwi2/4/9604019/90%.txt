 Consider the following magic rule: magic_vp(VForm CSem|Args SSem t\tmagic_vp(VForm,Args,SSem  Through trimming this magic rule, e Rule 15 is more general than rule 14e rule 2 Magic compilation does not limit the information that can be used for filtering Magic evaluation constitutes an interesting combination of the advantages of top-down and bottom-up evaluation Magic makes filtering explicit through characterizing it as definite clauses Suppose the original grammar rule looks as follows: s(P0,P,VForm,SSem t\tvp(P1,P,VForm CSem SSem t\tnp(P0,P1,CSem  A magic literal is added to the right-hand side of the rule which 'guards' the application of the rule Corresponding to the first right-hand side literal in the original rule step 3 derives the following magic rule: magic_vp(P1,P,VForm CSem SSem t\tmagic_s(P0,P,VForm,SSem  The second right-hand side literal in the original rule leads to the following magic rule: magic_np(P0,P1,CSem t\tmagic_s(P0,P,VForm,SSem t\tvp(P1,P,VForm CSem SSem  Given a logic program, Magic produces a new program in which the filtering as normally resulting from top-down evaluation is explicitly characterized through, so-called, magic predicates, which produce variable bindings for filtering when evaluated bottom-upe generation The facts, i The filtering tree is reversed and derives magic facts starting from the seed in a bottom-up fashion Dotted lines are used to represent when 'normal' facts are combined with magic facts to derive new magic facts As a result of the definite clause characterization of filtering, Magic brings filtering into the logic underlying the grammar As a result of characterizing filtering by a definite clause representation Magic brings filtering inside of the logic underlying the grammar Just like top-down evaluation of the original grammar bottom-up evaluation of its magic compiled version falls prey to non-termination in the face of head recursion This 'cyclic' magic rule is derived from the head-recursive vp rule in the example grammar.