 Consider the following magic rule: magic_vp(VForm CSem|Args SSem t\tmagic_vp(VForm,Args,SSem  Through trimming this magic rule, e However, cut the magic rules 14 and 15 in figure  Rule 15 is more general than rule 14 A possible solution to this problem is to couple magic rules with the modified version of the original grammar rule that instigated ite rule 2 Magic compilation does not limit the information that can be used for filtering Unfolding can also be used to collapse filtering steps As becomes apparent upon closer investigation of the abstract unfolding tree in figure the magic predicates magic_sentence, magic_s and magic_vp provide virtually identical variable bindings to guard bottom-up application of the modified versions of the original grammar rules Unfolding can be used to reduce the number of magic facts that are produced during processingg in figure the magic_s rule: magic_s(finite,SSem t\tmagic_sentence(decl(SSem  This results in the following new rule which uses the seed for filtering directly without the need for an intermediate filtering step: s(P0,P,finite,SSem t\t\t\tmagic_sentence(decl(SSem t\t\t\tvp(P1,P,finite CSem SSem t\t\t\tnp(P0,P1,CSem  This can lead to nontermination as the tree fragments enumerated in bottom-up evaluation of magic compiled grammars are connected  Performing this optimization throughout the magic part of the grammar in figure not only leads to a more succinct grammar, but brings about a different processing behavior Generation with the resulting grammar can be compared best with head corner generation (see next section  After cycle removal, incorporating relevant indexing and the collapsing of redundant magic predicates the magic-compiled grammar from figure looks as displayed in figure  The facts in the chart resulted from not-so-naive bottom-up evaluation: semi-naive evaluation without subsumption checking  The resulting processing behavior is similar to the behavior that would result from head corner generation except that the different filtering steps are performed in a bottom-up fashion Given a derived fact or seed magic_cat_1(property_1) bottom-up evaluation of the abstract grammar in figure leads to spurious ambiguity There are two possible solutions for cat_2 as a result of the fact that the filtering resulting from the magic literal in rule 1 is too unspecific Magic evaluation constitutes an interesting combination of the advantages of top-down and bottom-up evaluation It allows bottom-up filtering that achieves a goal-directedness which corresponds to dynamic top-down evaluation with abstraction and subsumption checking Unfolding can be used to eliminate superfluous filtering steps Magic makes filtering explicit through characterizing it as definite clauses Intuitively understood, filtering is reversed as binding information that normally becomes available as a result of top-down evaluation is derived by bottom-up evaluation of the definite clause characterization of filtering For each rule in P, add the modified version of the rule to P[mg  For each rule r in P with head, say, p( and for each literal in its body, add a magic rule to P[mg  Suppose the original grammar rule looks as follows: s(P0,P,VForm,SSem t\tvp(P1,P,VForm CSem SSem t\tnp(P0,P1,CSem  Step 2 of the algorithm results in the following modified version of the original grammar rule: s(P0,P,VForm,SSem t\tmagic_s(P0,P,VForm,SSem t\tvp(P1,P,VForm CSem SSem t\tnp(P0,P1,CSem  A magic literal is added to the right-hand side of the rule which 'guards' the application of the rule Corresponding to the first right-hand side literal in the original rule step 3 derives the following magic rule: magic_vp(P1,P,VForm CSem SSem t\tmagic_s(P0,P,VForm,SSem  The second right-hand side literal in the original rule leads to the following magic rule: magic_np(P0,P1,CSem t\tmagic_s(P0,P,VForm,SSem t\tvp(P1,P,VForm CSem SSem  Magic (templates) is a general compilation technique for efficient bottom-up evaluation of logic programs developed in the deductive database community  Magic compilation is illustrated on the basis of the simple logic grammar extract in figure  With this grammar a simple top-down generation strategy does not terminate as a result of the head recursion in rule 3 Given a logic program, Magic produces a new program in which the filtering as normally resulting from top-down evaluation is explicitly characterized through, so-called, magic predicates, which produce variable bindings for filtering when evaluated bottom-upe generation The modified versions of the original rules in the grammar are adapted accordingly The facts, i The filtering tree is reversed and derives magic facts starting from the seed in a bottom-up fashiong in order to derive fact 13, magic fact 2 is unified with the magic literal in the modified version of rule 2 (in addition to the facts 12 and 10  Dotted lines are used to represent when 'normal' facts are combined with magic facts to derive new magic facts As a result of the definite clause characterization of filtering, Magic brings filtering into the logic underlying the grammar Just like in case of Shieber's bottom-up generator, bottom-up evaluation of magic-compiled grammars produced with this Magic variant is only guaranteed to be complete in case the original grammar obeys the semantic monotonicity constraint As a result of characterizing filtering by a definite clause representation Magic brings filtering inside of the logic underlying the grammar Just like top-down evaluation of the original grammar bottom-up evaluation of its magic compiled version falls prey to non-termination in the face of head recursion It is however possible to eliminate the subsumption check through fine-tuning the magic predicates derived for a particular grammar in an off-line fashion In figure the relation between the magic predicates for the example grammar is represented by an unfolding tree  Only the magic part of the abstract unfolding tree is represented This 'cyclic' magic rule is derived from the head-recursive vp rule in the example grammar There is however no reason to keep this rule in the magic-compiled grammar Finding these types of cycles in the magic part of the compiled grammar is in general undecidable It is possible though to `trim' the magic predicates by applying an abstraction function.