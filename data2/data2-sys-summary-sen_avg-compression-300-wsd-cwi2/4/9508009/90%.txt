 These rules will be called expansion rules, since their application will invariably expand the tree structure There are three sorts of expansion rules: those which expand the tree by generating two formulae from a single one occurring previously in the derivation, those which expand the tree by combining two formulae into a third one which is then added to the tree, and the branching rule The first kind of rule corresponds to what is called -rule in Smullyan tableaux; always rules will be called -rules here as well We shall refer to the second kind as -rules, and to the branching rule as -rule - after Smullyan's, even though his branching rules are different Figure summarises the expansion rules to be employed by the system The rules are easily interpreted according to the intuitions assigned above to signs, formulae and information tokens Given the expansion rules, the definition of the main data structure to be manipulated by the theorem proving (parsing) algorithm is straightforward: a derivation tree, , is simply a binary tree built from a set of given formulae by applying the rules For efficiency reasons non-branching rules will be exhaustively applied before we move on to employing -rules We have seen above that the labels are means to propagate information about the formulae through the derivation tree From a semantic viewpoint, the calculi addressed in this paper are obtained by varying the structure assigned to the set of formulae in the derivation Apart from the fact that it lacks generality, since implementing more powerful calculi would involve modifying the code in order to accommodate new structural rules, this approach presents several sources of inefficiency In that paper, the theorem prover employed is based on proof nets, and the characterisation of different calculi is taken care of by labelling the formulae For substructural calculi stronger than L, much of the complexity (perhaps too much) is shifted to the label unification procedures The categorial grammar research programme requires the use of a range of logical calculi for linguistic description Dependency Categorial Grammar as well as stronger calculi which extend the power of L through the addition of structural rules Then we move on to the theorem proving strategy, introducing the LKE approach and the algebraic apparatus used to characterise different calculi Many proof procedures for classical logic have been proposed: natural deduction, Gentzen's sequents, analytic (Smullyan style) tableaux, etc The main reason for this is the fact that many of the Smullyan tableau expansion rules cause the proof tree to branch, thus increasing the complexity of the search The calculus defined above presents no negation, though However, we have seen that the Lambek calculus does not exhibit any of the structural properties of standard logic, and that different calculi may be obtained by varying structural transformations This mechanism is provided by labelling each formula in the derivation with information tokens Different categorial logics are handled by assigning different properties to the labelling algebra, while the basic syntactic apparatus remains the same.