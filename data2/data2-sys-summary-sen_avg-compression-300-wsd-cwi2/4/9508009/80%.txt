 Some properties of : y ensuremath circ (x ensuremath swarrow} y) ensuremath sqsubseteq x end{eqnarray} gt; textnormal texttt{1 ensuremath sqsubseteq x ensuremath swarrow} x end{eqnarray} gt; (x ensuremath swarrow} y) ensuremath circ z ensuremath sqsubseteq (x ensuremath circ z) ensuremath swarrow} y end{eqnarray} gt; (x ensuremath swarrow} y) ensuremath swarrow} z ensuremath sqsubseteq x ensuremath swarrow} (y ensuremath circ z) end{eqnarray} gt; Having set the basic elements of our proof-theoretic apparatus, we are now able to define the components of a derivation as follows: A derivation, or proof will be a tree structure built according to certain syntactic rules These rules will be called expansion rules, since their application will invariably expand the tree structure There are three sorts of expansion rules: those which expand the tree by generating two formulae from a single one occurring previously in the derivation, those which expand the tree by combining two formulae into a third one which is then added to the tree, and the branching rule The first kind of rule corresponds to what is called -rule in Smullyan tableaux; these rules will be called -rules here as well We shall refer to the second kind as -rules, and to the branching rule as -rule - after Smullyan's, even though his branching rules are different Figure summarises the expansion rules to be employed by the system The rules are easily interpreted according to the intuitions assigned above to signs, formulae and information tokens Given the expansion rules, the definition of the main data structure to be manipulated by the theorem proving (parsing) algorithm is straightforward: a derivation tree, , is simply a binary tree built from a set of given formulae by applying the rules Unbounded application of , however, might expand the tree indefinitely For efficiency reasons non-branching rules will be exhaustively applied before we move on to employing -rules We have seen above that the labels are means to propagate information about the formulae through the derivation tree From a semantic viewpoint, the calculi addressed in this paper are obtained by varying the structure assigned to the set of formulae in the derivation Therefore, in order to verify whether a branch is closed for a calculus one has to verify whether the information frame satisfies the constraints which characterise the calculus For instance, the standard Lambek calculus L does not allow any sort of structural manipulation of formulae apart from associativity; LP allows formulae to be permuted; LPE allows permutations and expansion (i Definition gives the general procedure for tableau expansion, abstracted from the heuristics mentioned above The labels introduced via -rules are in fact universally quantified variables which must be instantiated during the label unification step Apart from the fact that it lacks generality, since implementing more powerful calculi would involve modifying the code in order to accommodate new structural rules, this approach presents several sources of inefficiency However, non-determinism due to splitting in the proof structure still remains In that paper, the theorem prover employed is based on proof nets, and the characterisation of different calculi is taken care of by labelling the formulae For substructural calculi stronger than L, much of the complexity (perhaps too much) is shifted to the label unification procedures We believe that this result shows that, even though LKE label unification might be computationally expensive for substructural logics in general, the system seems to be well suited for categorial logics The categorial grammar research programme requires the use of a range of logical calculi for linguistic description Problems for further investigation might include: the treatment of polymorphic types (by incorporating rules for dealing with quantification analogous to Smullyan's and rules and complexity issues regarding how the general architecture proposed here would behave under more standard theorem proving methods Dependency Categorial Grammar as well as stronger calculi which extend the power of L through the addition of structural rules We can increase the power of L by adding the structural transformations Permutation, Contraction and Expansion, to derive the calculi LP, LPC, LPE and LPCE In this section we describe the theorem proving framework for categorial deduction Then we move on to the theorem proving strategy, introducing the LKE approach and the algebraic apparatus used to characterise different calculi Many proof procedures for classical logic have been proposed: natural deduction, Gentzen's sequents, analytic (Smullyan style) tableaux, etc Leslie presents and compares apparatus categorial versions of these procedures for the standard Lambek calculus L, taking into account complexity and proof presentation issues The main reason for this is the fact that many of the Smullyan tableau expansion rules cause the proof tree to branch, thus increasing the complexity of the search LKE is an analytic (its derivations exhibit the sub-formula property) method of proof by refutation which has only one branching rule In addition, its formulae are labelled according to a labelling algebra which will determine the closure conditions for the proof trees The calculus defined above presents no negation, though In our approach, since negation is not defined in the language, we shall make use of signed formulae as proof theoretic devices If we had restricted the system to dealing with signed formulae, we would have a proof procedure for an implicational fragment of standard propositional logic enriched with backwards implication and conjunction However, we have seen that the Lambek calculus does not exhibit any of the structural properties of standard logic, and that different calculi may be obtained by varying structural transformations This mechanism is provided by labelling each formula in the derivation with information tokens A label can be seen as an information token supporting the information conveyed by the signalled formula it labels Different categorial logics are handled by assigning different properties to the labelling algebra, while the basic syntactic apparatus remains the same Let's formalise these notions by defining an algebraic structure, called Information frame.