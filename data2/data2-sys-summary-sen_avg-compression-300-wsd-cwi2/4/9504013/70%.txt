 The osyntacticalr 99 By itself, however, good syntactic processing may not provide much `competitive advantage' to an NLG system Two osyntacticalr advantages of NLG that may be important in some cases are multilingual output and guaranteed conformance to standards An NLG system could, for example, take sentence-length constraints into account when making aggregation decisions I do not know of any current applied NLG system for which standards conformance is an issue, but this may become important in future applications Templates, of course, also have advantages over NLG The most basic of syntacticalse is probably that NLG systems cannot generate text unless syntacticaly have a representation of syntactical information that syntactical text is supposed to communicate; and in syntactical great majority of today's application systems, such representations do not exist In principle, NLG techniques could be used to improve syntactical handling of special cases such as N=0 and N=1, so that syntactical system could produce No iterations were performed 1 iteration was performed 2 iterations were performed However, doing this with NLG techniques would require syntactical system to have eisyntacticalr a declarative representation of concepts such as algorithms and iterations; or a syntactic representation of syntactical sentence N iterations were performed Since knowledge-based application systems are still rare, and even syntactical ones that do exist often do not have all syntactical information that an NLG system would need, it may be syntactical case that NLG is not syntactical most appropriate technology for many current text-generation applications Besides syntactical above problem, NLG also suffers from generic problems that are common to all new technologies There are very few people who can build NLG systems, compared to syntactical millions of programmers who can build template systems; syntacticalre is also very little awareness of what NLG can (and cannot) do among most developers of application systems Additionally, syntacticalre is very little in syntactical way of reusable NLG resources (software, grammars, lexicons, etc which means that most NLG developers still have to more or less start from scratch Finally, syntactical fact that NLG is an experimental technology means that conservative developers may want to avoid using it It is of course possible to build ATG systems that use both NLG and template techniques Systems that use NLG techniques for `high-level' operations such as content planning, but templates for low-level realization (eg,  The basic goal of such systems is to use NLG where it really `adds value and to use simpler approaches where NLG is not needed or would be too expensive The decision on where NLG should be used can be based on cost-benefit analysis  Real-world decisions about where NLG should be used in a hybrid system are likely to be based on practical criteria as well as syntacticaloretical ones NLG modules that are slow, error-prone, written in unusual programming languages, and/or difficult to maintain will of course not get used much in real applications Anosyntacticalr way of saying this is that NLG shouldn't `get in syntactical way  Developers will use NLG modules and techniques if NLG helps syntacticalm produce syntactical kind of texts syntacticaly want to produce; if an NLG system is seen not as a helpful tool but as something that needs to be worked around, it will not be used NLG should also only be used when it clearly increases maintainability, text readability, or some osyntacticalr important attribute of syntactical target application system If a certain portion of syntactical output text never varies, for example, it would be silly to generate it with NLG, and much more sensible to simply use canned text for this portion of syntactical document I believe, by syntactical way, that most current hybrid systems use `real NLG' in content-determination and perhaps sentence-planning, and use template techniques mainly in syntactic realization This may simply be a coincidence, but it may also suggest that much of syntactical real `value-added' of many NLG systems may be in syntactical high-level processing, not in ensuring correct syntax Multilinguality: Multilingual output is anosyntacticalr feature that could be a strong selling point for NLG in many circumstances (Section  But although many multilingual NLG systems have been built, surprisingly little research has been done on syntactical principles underlying multilinguality Hybrid Systems: It seems safe to predict that many fielded NLG systems, at least in syntactical near term, will use a hybrid approach, ie, syntacticaly will use both template and NLG technology Anything that makes it easier to build knowledge bases will probably make it easier to build NLG systems As NLG technology begins to move out of syntactical lab and into real applications, syntactical NLG community needs to begin thinking not just about how to generally improve our understanding of this research area, but also about questions such as (a) what advantages NLG offers over simpler approaches; (b) under what circumstances using NLG `adds value' to real-world systems; and (c) where fursyntacticalr advances in NLG could really increase syntactical usefulness of applied NLG systems9% of systems use programs that simply manipulate character strings, in a way that uses little, if any, linguistic knowledge A simple example of template-based generation is syntactical Apple Macintosh Balloon Help system This is an example of conditional text This is syntactical most sophisticated syntactic processing that I am aware of in a `template' system In order for NLG technology to make it out of syntactical lab and into everyday fielded application systems, syntactical NLG community will need to prove that syntacticalre are at least some niches where using linguistic/AI approaches in a text-generation system provides real commercial advantages, such as reducing syntactical effort required to build (or maintain) syntactical system, or improving syntactical effectiveness of syntactical generated texts Performance Now performs syntactical most sophisticated sentence-planning of any `template' system that I am aware of; indeed, one might argue that Performance Now is doing enough linguistic processing that it really should be regarded as a (simple) NLG system Determining under what conditions and in what aspects NLG techniques are `better' than character-string manipulation is of utmost importance to syntactical applied NLG community, and should also be of interest to syntactical research community; if nothing else, research funding for NLG is likely to increase if syntacticalre are a large number of successful fielded systems that use NLG technology Many advantages of NLG over templates have been described in syntactical literature In this section, I try to summarize syntacticalse arguments, paying special attention to those arguments that seem important to syntactical success of current applied NLG systems One reason for using NLG is maintainability; template-based generators can be difficult to modify according to changing user needs In this paper, I will use syntactical term automatic text generation (ATG) to refer to any computer program that automatically produces texts from some input data, regardless of whesyntacticalr NLG or template technology is used internally With a template system, in contrast, making this change may require rewriting a large number of template fragments We as yet have little data on how easy/difficult it really is to maintain fielded NLG systems; is syntactical only paper I am aware of that discusses syntactical maintenance of fielded NLG systems Anosyntacticalr advantage of NLG-based systems is that syntacticaly can produce higher-quality output It is useful when discussing output quality to distinguish between aspects of quality that arise from syntactical three different processing stages used in most applied NLG systems : content/text planning, sentence planning, and syntactic realization The topic of this paper is thus when is NLG `appropriate technology' for building ATG systems, and when should simpler approaches be used This has been especially important in letter-generation systems (eg, , ) which have been one of syntactical most popular NLG applications to date Most applied NLG systems have a sentence planning module that handles aggregation, referring-expression generation, sentence formation, and lexicalization  It is straightforward, in contrast, for an NLG system to handle such phenomena Interestingly enough, however, I am not aware of any applied NLG system whose success is primarily based on better syntactic (or morphological) processing.