 In order to increase efficiency, one possible implementation for for DLGs exploits the incremental Datalog technique of generating and maintaining data bottom-up..  Datalog grammars were born in order to address all these deficiencies, namely: an infinite Herbrand Universe, non-termination, unnecessary recomputation, structure creation on the heap, bottleneck for multi-threaded execution due to the use of (sequential) list data structures, and inability to work directly on files..  requantification..  In Datalog grammars, a given CF grammar is automatically translated into an assertional representation, first proposed by Robert Kowalski, which is largely equivalent to the list-based one but which ensures, under appropriate evaluation mechanisms such as OLDT resolution, that the termination and complexity properties of the original CF-grammar are preserved..  This is done by what we call c-unification: unify the parts in the parallel terms which are unifiable, and conjoin those that are not(i.e the parallel elements with the exception of the last two arguments, which are generating from the two pairs of last arguments P1-P2 and P2+1-P3 of the parallel structures, as P1 and P3 .. 