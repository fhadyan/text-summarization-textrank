 Some examples: (a) it could be assumed that all the bracketing for the strings is to the right thus favouring an incremental approach; (b) type reuse could be blocked at the level of the formulae, reducing the the computational cost of searches for label closure, since most of the calculi in the family covered by the system are resource sensitive; (c) priority could be given to juxtaposed strings for -rule application, etc..  Problems for further investigation might include: the treatment of polymorphic types (by incorporating rules for dealing with quantification analogous to Smullyan's and rules and complexity issues regarding how the general architecture proposed here would behave under more standard theorem proving methods..  For instance, if we assume that the order in which the types occur is not relevant, then we may allow permutation on the operands, so that x y y x; if we assume that contraction is a structural property of the calculus then the string [S/NP, NP, NP] will also yield an S, since y y y, etc.. 